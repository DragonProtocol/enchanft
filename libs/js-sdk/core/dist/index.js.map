{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  PublicKey,\n  Connection,\n  SystemProgram,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport {\n  Program,\n  AnchorProvider,\n  web3,\n  BN,\n  utils,\n} from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { Metadata } from \"@metaplex-foundation/mpl-token-metadata\";\n\nimport idl from \"./synft.json\";\nimport type { Synft } from \"./synft\";\n// import axios from \"axios\";\nconst PARENT_OFFSET = 40; // 8(anchor) + 32(pubkey)\nconst CHILD_OFFSET = 8; // 8(anchor)\nconst MPL_PROGRAM_ID = new PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport const PROGRAM_ID = new PublicKey(idl.metadata.address);\nexport enum SynftSeed {\n  SOL = \"sol-seed\",\n  CHILDREN_OF = \"children-of\",\n  METADATA = \"metadata\",\n  ACCOUNT_SEED = \"synthetic-nft-account-seed\",\n  MINT_SEED = \"synthetic-nft-mint-seed\",\n  PARENT_METADATA = \"parent-metadata-seed\",\n}\nexport type MetaInfo = {\n  mint: PublicKey;\n  metadata: Metadata; // metaplex metadata\n  externalMetadata: any; // metaplex uri 指向的 json 数据\n};\n\nexport default class SynftContract {\n  private _connection: Connection | null = null;\n  public program: Program<Synft> | null = null;\n\n  constructor(connection: Connection) {\n    const provider = new AnchorProvider(\n      connection,\n      {} as any,\n      AnchorProvider.defaultOptions()\n    );\n    const program = new Program(\n      idl as any,\n      PROGRAM_ID,\n      provider\n    ) as Program<Synft>;\n    this._connection = connection;\n    this.program = program;\n  }\n\n  public async copyNFTInstruction(\n    owner: PublicKey,\n    mint: PublicKey,\n    {\n      name,\n      symbol,\n      metadataUri,\n    }: { name: string; symbol: string; metadataUri: string }\n  ): Promise<TransactionInstruction> {\n    if (!this.program) {\n      throw new Error(\"Init Contract with connect first\");\n    }\n    const mintKey = mint;\n    const program = this.program;\n\n    const [nftMintPDA, _nftMintBump] = await PublicKey.findProgramAddress(\n      [Buffer.from(SynftSeed.MINT_SEED), mintKey.toBuffer()],\n      PROGRAM_ID\n    );\n    const [nftTokenAccountPDA, _nftTokenAccountBump] =\n      await PublicKey.findProgramAddress(\n        [Buffer.from(SynftSeed.ACCOUNT_SEED), mintKey.toBuffer()],\n        PROGRAM_ID\n      );\n\n    const [nftMetadataPDA, _nftMetadataBump] =\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from(SynftSeed.METADATA),\n          MPL_PROGRAM_ID.toBuffer(),\n          nftMintPDA.toBuffer(),\n        ],\n        MPL_PROGRAM_ID\n      );\n\n    const instructionCopy = program.methods\n      .nftCopy(...[name, symbol, metadataUri])\n      .accounts({\n        currentOwner: owner,\n        fromNftMint: mintKey,\n        nftMetaDataAccount: nftMetadataPDA,\n        nftMintAccount: nftMintPDA,\n        nftTokenAccount: nftTokenAccountPDA,\n        systemProgram: SystemProgram.programId,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        mplProgram: MPL_PROGRAM_ID,\n      })\n      .instruction();\n    return instructionCopy;\n  }\n\n  public async injectSOLInstruction(\n    owner: PublicKey,\n    mintKey: PublicKey,\n    solAmount: number\n  ): Promise<TransactionInstruction> {\n    if (!this.program || !this._connection) {\n      throw new Error(\"Init Contract with connect first\");\n    }\n    const injectSolAmount = new BN(solAmount);\n    const mintTokenAccount = await this._connection.getTokenLargestAccounts(\n      mintKey\n    );\n    const mintTokenAccountAddress = mintTokenAccount.value[0].address;\n\n    const [solPDA, solBump] = await PublicKey.findProgramAddress(\n      [Buffer.from(SynftSeed.SOL), mintKey.toBuffer()],\n      PROGRAM_ID\n    );\n    const instruction = await this.program.methods\n      .injectToSol(solBump, injectSolAmount)\n      .accounts({\n        currentOwner: owner,\n        parentTokenAccount: mintTokenAccountAddress,\n        parentMintAccount: mintKey,\n        solAccount: solPDA,\n        systemProgram: SystemProgram.programId,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n      })\n      .instruction();\n\n    return instruction;\n  }\n\n  public async injectSOLWithTokenAccountInstruction(\n    owner: PublicKey,\n    mintKey: PublicKey,\n    tokenAccount: PublicKey,\n    solAmount: number\n  ): Promise<TransactionInstruction> {\n    if (!this.program || !this._connection) {\n      throw new Error(\"Init Contract with connect first\");\n    }\n    const injectSolAmount = new BN(solAmount);\n\n    const [solPDA, solBump] = await PublicKey.findProgramAddress(\n      [Buffer.from(SynftSeed.SOL), mintKey.toBuffer()],\n      PROGRAM_ID\n    );\n    const instruction = await this.program.methods\n      .injectToSol(solBump, injectSolAmount)\n      .accounts({\n        currentOwner: owner,\n        parentTokenAccount: tokenAccount,\n        parentMintAccount: mintKey,\n        solAccount: solPDA,\n        systemProgram: SystemProgram.programId,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n      })\n      .instruction();\n\n    return instruction;\n  }\n\n  /**\n   * 将一个 NFT 注入到另一个 NFT\n   * @param owner 所属\n   * @param rootMintKey 被注入的 NFT\n   * @param children 注入的 NFT，数组。协议支持一下子注入多个\n   * @returns\n   */\n  public async injectNFTToRoot(\n    owner: PublicKey,\n    rootMintKey: PublicKey,\n    children: PublicKey[],\n    reversible = true\n  ): Promise<TransactionInstruction[]> {\n    if (!this._connection || !this.program) {\n      throw new Error(\"Init Contract with connect first\");\n    }\n    if (children.length === 0) {\n      throw new Error(\"children must has one item\");\n    }\n    const program = this.program;\n    const connection = this._connection;\n\n    const parentMintTokenAccounts = await connection.getTokenLargestAccounts(\n      rootMintKey\n    );\n    const parentMintTokenAccountAddr = parentMintTokenAccounts.value[0].address;\n\n    const [parentPDA, parentBump] = await PublicKey.findProgramAddress(\n      [Buffer.from(SynftSeed.PARENT_METADATA), rootMintKey.toBuffer()],\n      program.programId\n    );\n\n    const instructions = children.map(async (item) => {\n      const [metadataPDA, metadataBump] = await PublicKey.findProgramAddress(\n        [\n          Buffer.from(SynftSeed.CHILDREN_OF),\n          rootMintKey.toBuffer(),\n          item.toBuffer(),\n        ],\n        program.programId\n      );\n\n      const [parentOfChildPDA, parentOfChildBump] =\n        await PublicKey.findProgramAddress(\n          [Buffer.from(SynftSeed.PARENT_METADATA), item.toBuffer()],\n          program.programId\n        );\n\n      // 获取 NFT 有效的 tokenAccount\n      const childMintTokenAccounts = await connection.getTokenLargestAccounts(\n        item\n      );\n      const childMintTokenAccountsAddr =\n        childMintTokenAccounts.value[0].address;\n\n      const instruction = await program.methods\n        .injectToRoot(reversible, metadataBump, parentBump, parentOfChildBump)\n        .accounts({\n          currentOwner: owner,\n          childTokenAccount: childMintTokenAccountsAddr,\n          childMintAccount: item,\n          parentTokenAccount: parentMintTokenAccountAddr,\n          parentMintAccount: rootMintKey,\n          childrenMeta: metadataPDA,\n          parentMeta: parentPDA,\n          parentMetaOfChild: parentOfChildPDA,\n\n          systemProgram: SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        })\n        .signers([])\n        .instruction();\n      return instruction;\n    });\n    const instructionTx = await Promise.all(instructions);\n\n    return instructionTx;\n  }\n\n  /**\n   * 将 children NFT 注入到 mint NFT\n   * @param owner 所属\n   * @param mintKey 被注入的 NFT 的 mint\n   * @param childrenMint 注入的 NFT，数组。协议支持一下注入多个\n   * @param { parentMintKey, rootPDA } 注入非 root NFT需要提供被注入的 root 信息\n   * @returns\n   */\n  public async injectNFTToNonRoot(\n    owner: PublicKey,\n    mintKey: PublicKey, // mint4\n    childrenMint: PublicKey[], // mint5\n    rootPDA: PublicKey,\n    reversible = true\n  ) {\n    if (!this._connection || !this.program) {\n      throw new Error(\"Init Contract with connect first\");\n    }\n    if (childrenMint.length === 0) {\n      throw new Error(\"childrenMint must has one item\");\n    }\n\n    const program = this.program;\n    const connection = this._connection;\n\n    const rootMeta = await program.account.childrenMetadata.fetch(rootPDA);\n    const rootMintKey = rootMeta.parent;\n    const rootMintTokenAccounts = await connection.getTokenLargestAccounts(\n      rootMintKey\n    );\n    const rootMintTokenAccountAddr = rootMintTokenAccounts.value[0].address;\n\n    const [rootMetadataPDA] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from(SynftSeed.CHILDREN_OF),\n        rootMintKey.toBuffer(),\n        mintKey.toBuffer(),\n      ],\n      PROGRAM_ID\n    );\n\n    const [metadataPDA, metadataBump] = await PublicKey.findProgramAddress(\n      [Buffer.from(SynftSeed.PARENT_METADATA), mintKey.toBuffer()],\n      PROGRAM_ID\n    );\n\n    const mintTokenAccounts = await connection.getTokenLargestAccounts(mintKey);\n    const mintTokenAccountAddr = mintTokenAccounts.value[0].address;\n\n    const instructions = childrenMint.map(async (item) => {\n      const [childMetadataPDA, childMetadataBump] =\n        await PublicKey.findProgramAddress(\n          [\n            Buffer.from(SynftSeed.CHILDREN_OF),\n            mintKey.toBuffer(),\n            item.toBuffer(),\n          ],\n          PROGRAM_ID\n        );\n\n      const [itemParentMetadataPDA, _itemParentMetadataBump] =\n        await PublicKey.findProgramAddress(\n          [\n            Buffer.from(utils.bytes.utf8.encode(SynftSeed.PARENT_METADATA)),\n            item.toBuffer(),\n          ],\n          program.programId\n        );\n\n      const childMintTokenAccounts = await connection.getTokenLargestAccounts(\n        item\n      );\n      const childMintTokenAccountAddr = childMintTokenAccounts.value[0].address;\n\n      const instruction = await program.methods\n        .injectToNonRoot(reversible, childMetadataBump, metadataBump)\n        .accounts({\n          currentOwner: owner,\n          childTokenAccount: childMintTokenAccountAddr,\n          childMintAccount: item,\n          parentTokenAccount: mintTokenAccountAddr,\n          parentMintAccount: mintKey,\n          rootTokenAccount: rootMintTokenAccountAddr,\n          rootMintAccount: rootMintKey,\n          childrenMeta: childMetadataPDA,\n          childrenMetaOfParent: rootMetadataPDA,\n          parentMeta: metadataPDA,\n          rootMeta: rootPDA,\n          parentMetaOfChild: itemParentMetadataPDA,\n\n          systemProgram: SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          tokenProgram: TOKEN_PROGRAM_ID,\n        })\n        .instruction();\n      return instruction;\n    });\n    const instructionTx = await Promise.all(instructions);\n    return instructionTx;\n  }\n\n  /**\n   * 将注入的 SOL 提取出来\n   * @param mintKey 被注入的 NFT 的 mint\n   * @param walletPubKey 钱包的 PubKey\n   * @returns Promise<TransactionInstruction>\n   */\n  public async extractSOL(\n    mintKey: PublicKey,\n    walletPubKey: PublicKey\n  ): Promise<TransactionInstruction> {\n    if (!this._connection || !this.program) {\n      throw new Error(\"Init Contract with connect first\");\n    }\n\n    const program = this.program;\n    const connection = this._connection;\n    const [solPDA, solBump] = await PublicKey.findProgramAddress(\n      [Buffer.from(SynftSeed.SOL), mintKey.toBuffer()],\n      program.programId\n    );\n\n    const parentMintTokenAccountBalancePairs =\n      await connection.getTokenLargestAccounts(mintKey);\n    const parentMintTokenAccountAddr =\n      parentMintTokenAccountBalancePairs.value[0].address;\n\n    const extractTx = await program.methods\n      .extractSol(solBump)\n      .accounts({\n        currentOwner: walletPubKey,\n        parentTokenAccount: parentMintTokenAccountAddr,\n        parentMintAccount: mintKey,\n        solAccount: solPDA,\n\n        systemProgram: SystemProgram.programId,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n      })\n      .signers([])\n      .instruction();\n\n    return extractTx;\n  }\n\n  public async extractChildNFTToUser(\n    walletPubKey: PublicKey,\n    receiver: PublicKey,\n    mintKey: PublicKey, // mint4\n    {\n      parentMintKey, // mint3\n      rootMintKey,\n    }: {\n      parentMintKey: PublicKey;\n      rootMintKey: PublicKey;\n    }\n  ) {\n    if (!this._connection || !this.program) {\n      throw new Error(\"Init Contract with connect first\");\n    }\n    const program = this.program;\n    const connection = this._connection;\n\n    const isRootChild = rootMintKey.toString() === parentMintKey.toString();\n    // const rootMeta = await program.account.childrenMetadataV2.fetch(rootPDA)\n    // const rootMintKey = rootMeta.parent\n    const rootMintTokenAccounts = await connection.getTokenLargestAccounts(\n      rootMintKey\n    );\n    const rootMintTokenAccountAddr = rootMintTokenAccounts.value[0].address;\n\n    const [rootMetaPDA, _rootMetadataBump] = await PublicKey.findProgramAddress(\n      [\n        Buffer.from(SynftSeed.CHILDREN_OF),\n        rootMintKey.toBuffer(),\n        parentMintKey.toBuffer(),\n      ],\n      PROGRAM_ID\n    );\n\n    const [parentMetaPDA, parentMetadataBump] =\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from(SynftSeed.CHILDREN_OF),\n          parentMintKey.toBuffer(),\n          mintKey.toBuffer(),\n        ],\n        PROGRAM_ID\n      );\n\n    // const parentMintTokenAccounts = await connection.getTokenLargestAccounts(parentMintKey)\n    // const parentMintTokenAccountAddr = parentMintTokenAccounts.value[0].address\n\n    const mintTokenAccounts = await connection.getTokenLargestAccounts(mintKey);\n    const mintTokenAccountAddr = mintTokenAccounts.value[0].address;\n\n    const tx = await program.methods\n      .transferChildNft(parentMetadataBump)\n      .accounts({\n        currentOwner: walletPubKey,\n        childTokenAccount: mintTokenAccountAddr,\n        childMintAccount: mintKey,\n        rootTokenAccount: rootMintTokenAccountAddr,\n        rootMintAccount: rootMintKey,\n        childrenMetaOfParent: parentMetaPDA,\n        parentMintAccount: parentMintKey,\n        rootMeta: isRootChild ? parentMetaPDA : rootMetaPDA,\n        receiverAccount: receiver,\n\n        systemProgram: SystemProgram.programId,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      })\n      .signers([])\n      .instruction();\n    return tx;\n  }\n\n  public async burn(walletPubKey: PublicKey, mintKey: PublicKey) {\n    if (!this._connection || !this.program) {\n      throw new Error(\"Init Contract with connect first\");\n    }\n    const program = this.program;\n\n    const [solPDA, _solBump] = await PublicKey.findProgramAddress(\n      [Buffer.from(SynftSeed.SOL), mintKey.toBuffer()],\n      program.programId\n    );\n    const [parentPDA, _parentBump] = await PublicKey.findProgramAddress(\n      [Buffer.from(SynftSeed.PARENT_METADATA), mintKey.toBuffer()],\n      program.programId\n    );\n    const [oldRootOwner] = await PublicKey.findProgramAddress(\n      [Buffer.from(\"root-owner-seed\"), mintKey.toBuffer()],\n      program.programId\n    );\n\n    const mintTokenAccount = await this._connection.getTokenLargestAccounts(\n      mintKey\n    );\n    const mintTokenAccountAddress = mintTokenAccount.value[0].address;\n\n    const burnTx = await program.methods\n      .startBurn()\n      .accounts({\n        currentOwner: walletPubKey,\n        parentMintAccount: mintKey,\n        parentTokenAccount: mintTokenAccountAddress,\n        parentMetadata: parentPDA,\n        solAccount: solPDA,\n        oldRootOwner,\n\n        systemProgram: SystemProgram.programId,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      })\n      .signers([])\n      .instruction();\n    return burnTx;\n  }\n\n  public async getRootMintFromRootPDA(pda: string) {\n    if (!this._connection || !this.program) {\n      throw new Error(\"Init Contract with connect first\");\n    }\n    const rootMeta = await this.program.account.childrenMetadata.fetch(pda);\n    const rootMintKey = rootMeta.parent;\n    return rootMintKey;\n  }\n\n  public async getParentNFT(mintKey: PublicKey) {\n    if (!this._connection || !this.program) {\n      throw new Error(\"Init Contract with connect first\");\n    }\n    const parentNFT = await this.program.account.childrenMetadata.all([\n      {\n        memcmp: {\n          offset: CHILD_OFFSET,\n          bytes: mintKey.toBase58(),\n        },\n      },\n    ]);\n\n    if (parentNFT && parentNFT[0]) {\n      const rootPDA = parentNFT[0].account.root.toString();\n      const rootMintKey = await this.getRootMintFromRootPDA(rootPDA);\n      return {\n        mint: parentNFT[0].account.parent.toString(),\n        rootPDA: parentNFT[0].account.root.toString(),\n        isMutated: parentNFT[0].account.isMutated,\n        rootMint: rootMintKey!.toString(),\n      };\n    }\n    return null;\n  }\n\n  public async getInjectChildren(mintKey: PublicKey) {\n    if (!this._connection || !this.program) {\n      throw new Error(\"Init Contract with connect first\");\n    }\n    const filter = [\n      {\n        memcmp: {\n          offset: PARENT_OFFSET,\n          bytes: mintKey.toBase58(),\n        },\n      },\n    ];\n\n    const childrenNFT = await this.program.account.childrenMetadata.all(filter);\n    return childrenNFT;\n  }\n\n  public async getInjectSOL(mintKey: PublicKey) {\n    if (!this._connection || !this.program) {\n      throw new Error(\"Init Contract with connect first\");\n    }\n    const [solPDA] = await PublicKey.findProgramAddress(\n      [Buffer.from(SynftSeed.SOL), mintKey.toBuffer()],\n      PROGRAM_ID\n    );\n    const solChildrenMetadata = await this._connection.getAccountInfo(solPDA);\n    return solChildrenMetadata;\n  }\n\n  public async checkHasInject(mintKey: PublicKey): Promise<{\n    hasInjected: boolean;\n    hasInjectedSOL: boolean;\n    hasInjectedNFT: boolean;\n  }> {\n    if (!this._connection || !this.program) {\n      throw new Error(\"Init Contract with connect first\");\n    }\n    const solChildrenMetadata = await this.getInjectSOL(mintKey);\n    const childrenNFT = await this.getInjectChildren(mintKey);\n\n    return {\n      hasInjected: !!solChildrenMetadata || childrenNFT.length > 0,\n      hasInjectedNFT: childrenNFT.length > 0,\n      hasInjectedSOL: !!solChildrenMetadata,\n    };\n  }\n}\n"],"names":["PublicKey","SynftSeed","AnchorProvider","Program","SystemProgram","web3","TOKEN_PROGRAM_ID","BN","utils"],"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"}