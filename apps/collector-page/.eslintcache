[{"D:\\www\\team\\enchanft\\apps\\collector-page\\global.d.ts":"1","D:\\www\\team\\enchanft\\apps\\collector-page\\jest.config.ts":"2","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\constants\\index.ts":"3","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\community\\contributionRanksSlice.ts":"4","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\explore\\recommendProjectsSlice.ts":"5","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\explore\\recommendTasksSlice.ts":"6","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\explore\\searchProjectsSlice.ts":"7","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\explore\\searchTasksSlice.ts":"8","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\project\\projectDetailSlice.ts":"9","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\task\\taskDetailSlice.ts":"10","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\user\\checkinCommunitiesSlice.ts":"11","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\user\\communityHandlesSlice.ts":"12","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\user\\followedCommunitiesSlice.ts":"13","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\user\\projectHandlesSlice.ts":"14","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\user\\taskHandlesSlice.ts":"15","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\user\\todoTasksSlice.ts":"16","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\user\\userRewardsSlice.ts":"17","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\website\\websiteSlice.ts":"18","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\GlobalStyle.ts":"19","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\index.ts":"20","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\useAccountOperationForChain.ts":"21","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\useContributionranks.ts":"22","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\useGoogleAnalytics.ts":"23","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\useHandleAction.ts":"24","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\useInterval.ts":"25","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\useRoute.ts":"26","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\useTimeCountdown.ts":"27","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\useTodoTasksGroup.ts":"28","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\useUserHandlesForCommunity.ts":"29","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\useWindowSize.ts":"30","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\react-app-env.d.ts":"31","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\reportWebVitals.ts":"32","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\request\\axios.ts":"33","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\route\\routes.ts":"34","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\route\\utils.ts":"35","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\services\\api\\community.ts":"36","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\services\\api\\explore.ts":"37","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\services\\api\\login.ts":"38","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\services\\api\\reward.ts":"39","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\services\\api\\task.ts":"40","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\services\\api\\utils.ts":"41","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\setupTests.ts":"42","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\store\\hooks.ts":"43","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\store\\store.ts":"44","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\types\\api.ts":"45","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\types\\entities.ts":"46","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\types\\index.ts":"47","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\analytics.ts":"48","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\chain.ts":"49","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\lottie.ts":"50","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\nft.ts":"51","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\number.ts":"52","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\solana.ts":"53","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\string.ts":"54","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\task.ts":"55","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\time.ts":"56","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\token.ts":"57","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\twitter.ts":"58","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\wlUserReact.ts":"59"},{"size":249,"mtime":1669601630039,"results":"60","hashOfConfig":"61"},{"size":523,"mtime":1669632433588,"results":"62","hashOfConfig":"61"},{"size":1696,"mtime":1669601630078,"results":"63","hashOfConfig":"61"},{"size":4158,"mtime":1669633476638,"results":"64","hashOfConfig":"61"},{"size":4092,"mtime":1669634072529,"results":"65","hashOfConfig":"61"},{"size":3996,"mtime":1669633491995,"results":"66","hashOfConfig":"61"},{"size":4109,"mtime":1669633497603,"results":"67","hashOfConfig":"61"},{"size":3997,"mtime":1669633507036,"results":"68","hashOfConfig":"61"},{"size":3522,"mtime":1669633516909,"results":"69","hashOfConfig":"61"},{"size":3945,"mtime":1669633522640,"results":"70","hashOfConfig":"61"},{"size":1967,"mtime":1669633529685,"results":"71","hashOfConfig":"61"},{"size":8375,"mtime":1669634031488,"results":"72","hashOfConfig":"61"},{"size":4253,"mtime":1669633735568,"results":"73","hashOfConfig":"61"},{"size":2872,"mtime":1669633642262,"results":"74","hashOfConfig":"61"},{"size":14860,"mtime":1669634045975,"results":"75","hashOfConfig":"61"},{"size":4161,"mtime":1669633684802,"results":"76","hashOfConfig":"61"},{"size":3862,"mtime":1669633831313,"results":"77","hashOfConfig":"61"},{"size":877,"mtime":1669633817451,"results":"78","hashOfConfig":"61"},{"size":3046,"mtime":1669601630040,"results":"79","hashOfConfig":"61"},{"size":324,"mtime":1669601630086,"results":"80","hashOfConfig":"61"},{"size":3011,"mtime":1669601630086,"results":"81","hashOfConfig":"61"},{"size":1307,"mtime":1669631821424,"results":"82","hashOfConfig":"61"},{"size":599,"mtime":1669601630087,"results":"83","hashOfConfig":"61"},{"size":2882,"mtime":1669630949875,"results":"84","hashOfConfig":"61"},{"size":506,"mtime":1669631968343,"results":"85","hashOfConfig":"61"},{"size":896,"mtime":1669601630087,"results":"86","hashOfConfig":"61"},{"size":1568,"mtime":1669601630088,"results":"87","hashOfConfig":"61"},{"size":1328,"mtime":1669601630089,"results":"88","hashOfConfig":"61"},{"size":2927,"mtime":1669613824541,"results":"89","hashOfConfig":"61"},{"size":399,"mtime":1669601630089,"results":"90","hashOfConfig":"61"},{"size":40,"mtime":1659251280000,"results":"91","hashOfConfig":"61"},{"size":665,"mtime":1669629008991,"results":"92","hashOfConfig":"61"},{"size":3210,"mtime":1669632150398,"results":"93","hashOfConfig":"61"},{"size":2707,"mtime":1669601630090,"results":"94","hashOfConfig":"61"},{"size":547,"mtime":1669601630090,"results":"95","hashOfConfig":"61"},{"size":3056,"mtime":1669601630091,"results":"96","hashOfConfig":"61"},{"size":1373,"mtime":1669601630091,"results":"97","hashOfConfig":"61"},{"size":1886,"mtime":1669601630091,"results":"98","hashOfConfig":"61"},{"size":583,"mtime":1669601630092,"results":"99","hashOfConfig":"61"},{"size":4817,"mtime":1669628585915,"results":"100","hashOfConfig":"61"},{"size":739,"mtime":1669601630092,"results":"101","hashOfConfig":"61"},{"size":241,"mtime":1669601630092,"results":"102","hashOfConfig":"103"},{"size":542,"mtime":1669615919772,"results":"104","hashOfConfig":"61"},{"size":2977,"mtime":1669617542490,"results":"105","hashOfConfig":"61"},{"size":3872,"mtime":1669601630093,"results":"106","hashOfConfig":"61"},{"size":4417,"mtime":1669601630093,"results":"107","hashOfConfig":"61"},{"size":400,"mtime":1669601630093,"results":"108","hashOfConfig":"61"},{"size":659,"mtime":1669601630094,"results":"109","hashOfConfig":"61"},{"size":1091,"mtime":1669601630094,"results":"110","hashOfConfig":"61"},{"size":1737,"mtime":1669601630094,"results":"111","hashOfConfig":"61"},{"size":402,"mtime":1669601630094,"results":"112","hashOfConfig":"61"},{"size":584,"mtime":1669601630094,"results":"113","hashOfConfig":"61"},{"size":330,"mtime":1669601630095,"results":"114","hashOfConfig":"61"},{"size":577,"mtime":1669601630095,"results":"115","hashOfConfig":"61"},{"size":2483,"mtime":1669628930784,"results":"116","hashOfConfig":"61"},{"size":445,"mtime":1669601630095,"results":"117","hashOfConfig":"61"},{"size":1645,"mtime":1669601630096,"results":"118","hashOfConfig":"61"},{"size":1133,"mtime":1669601630096,"results":"119","hashOfConfig":"61"},{"size":1041,"mtime":1669601630096,"results":"120","hashOfConfig":"61"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"u70yg5",{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209"},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213"},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217"},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221"},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228"},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241"},{"filePath":"242","messages":"243","suppressedMessages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251"},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","suppressedMessages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258"},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","suppressedMessages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265"},{"filePath":"266","messages":"267","suppressedMessages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"qa9fcn",{"filePath":"272","messages":"273","suppressedMessages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","suppressedMessages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","suppressedMessages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281"},{"filePath":"282","messages":"283","suppressedMessages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","suppressedMessages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","suppressedMessages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","suppressedMessages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"294","messages":"295","suppressedMessages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297"},{"filePath":"298","messages":"299","suppressedMessages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","suppressedMessages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"304","messages":"305","suppressedMessages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"307","messages":"308","suppressedMessages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"310","messages":"311","suppressedMessages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","suppressedMessages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"316","messages":"317","suppressedMessages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","suppressedMessages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"322","messages":"323","suppressedMessages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\www\\team\\enchanft\\apps\\collector-page\\global.d.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\jest.config.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\constants\\index.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\community\\contributionRanksSlice.ts",["325","326","327","328"],[],"import {\n  EntityState,\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n} from '@reduxjs/toolkit';\nimport { fetchListForCommunityContributionRank } from '../../services/api/community';\nimport type { RootState } from '../../store/store';\nimport { AsyncRequestStatus } from '../../types';\nimport { CommunityContributionRankItem } from '../../types/api';\n\nexport type CommunityContributionRanksItemForEntity =\n  CommunityContributionRankItem;\ntype CommunitysState = EntityState<CommunityContributionRanksItemForEntity> & {\n  status: AsyncRequestStatus;\n  errorMsg: string;\n  currentRequestId: string | undefined; // 当前正在请求的id(由createAsyncThunk生成的唯一id)\n};\ntype FetchListResp = {\n  data: CommunityContributionRanksItemForEntity[];\n  errorMsg?: string;\n};\n\n// 列表信息，标准化数据为实体对象\nexport const communityContributionRanksEntity =\n  createEntityAdapter<CommunityContributionRanksItemForEntity>({\n    selectId: (item) => item.pubkey,\n  });\n// 初始化列表信息\nconst communitysState: CommunitysState =\n  communityContributionRanksEntity.getInitialState({\n    status: AsyncRequestStatus.IDLE,\n    errorMsg: '',\n    currentRequestId: undefined,\n  });\n\nexport const fetchCommunityContributionRanks = createAsyncThunk<\n  FetchListResp,\n  string,\n  {\n    rejectValue: FetchListResp;\n  }\n>(\n  'community/fetchCommunityContributionRanks',\n  async (slug, { rejectWithValue }) => {\n    try {\n      const resp = await fetchListForCommunityContributionRank(slug);\n      return { data: resp.data.data || [] };\n    } catch (error: any) {\n      if (!error.response) {\n        throw error;\n      }\n      return rejectWithValue({ data: [], errorMsg: error.response.data });\n    }\n  },\n  {\n    condition: (params, { getState }) => {\n      const state = getState() as RootState;\n      const {\n        communityContributionRanks: { status },\n      } = state;\n      // 之前的请求正在进行中,则阻止新的请求\n      if (status === AsyncRequestStatus.PENDING) {\n        return false;\n      }\n      return true;\n    },\n  }\n);\n\nexport const communityContributionRanksSlice = createSlice({\n  name: 'communityContributionRanks',\n  initialState: communitysState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchCommunityContributionRanks.pending, (state, action) => {\n        console.log('fetchCommunityContributionRanks.pending', action);\n        state.status = AsyncRequestStatus.PENDING;\n        state.errorMsg = '';\n        state.currentRequestId = action.meta.requestId;\n      })\n      .addCase(fetchCommunityContributionRanks.fulfilled, (state, action) => {\n        console.log('fetchCommunityContributionRanks.fulfilled', action);\n        const { requestId } = action.meta;\n        // 前后两次不同的请求，使用最后一次请求返回的数据\n        if (\n          state.currentRequestId !== requestId ||\n          state.status !== AsyncRequestStatus.PENDING\n        )\n          return;\n        state.status = AsyncRequestStatus.FULFILLED;\n        communityContributionRanksEntity.setAll(state, action.payload.data);\n      })\n      .addCase(fetchCommunityContributionRanks.rejected, (state, action) => {\n        console.log('fetchCommunityContributionRanks.rejected', action);\n        const { requestId } = action.meta;\n        // 前后两次不同的请求，使用最后一次请求返回的数据\n        if (\n          state.currentRequestId !== requestId ||\n          state.status !== AsyncRequestStatus.PENDING\n        )\n          return;\n        state.status = AsyncRequestStatus.REJECTED;\n        communityContributionRanksEntity.setAll(state, []);\n        if (action.payload) {\n          state.errorMsg = action.payload.errorMsg || '';\n        } else {\n          state.errorMsg = action.error.message || '';\n        }\n      });\n  },\n});\n\nexport const { selectAll } = communityContributionRanksEntity.getSelectors(\n  (state: RootState) => state.communityContributionRanks\n);\nexport const selecteContributionRanksState = (state: RootState) =>\n  state.communityContributionRanks;\nconst { reducer } = communityContributionRanksSlice;\nexport default reducer;\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\explore\\recommendProjectsSlice.ts",["329","330","331","332"],[],"import {\n  EntityState,\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n} from '@reduxjs/toolkit';\nimport { fetchListForRecommendProjects } from '../../services/api/explore';\nimport type { RootState } from '../../store/store';\nimport { AsyncRequestStatus } from '../../types';\nimport { ExploreRecommendProjectItem } from '../../types/api';\n\nexport type ExploreRecommendProjectItemEntity = ExploreRecommendProjectItem;\ntype ExploreRecommendProjectsState =\n  EntityState<ExploreRecommendProjectItemEntity> & {\n    status: AsyncRequestStatus;\n    errorMsg: string;\n    currentRequestId: string | undefined; // 当前正在请求的id(由createAsyncThunk生成的唯一id)\n  };\ntype FetchListThunkResp = {\n  data: ExploreRecommendProjectItemEntity[];\n  errorMsg?: string;\n};\n\n// 列表信息数据范式化\nexport const exploreRecommendProjectsEntity =\n  createEntityAdapter<ExploreRecommendProjectItemEntity>({\n    selectId: (item) => item.id,\n  });\n\n// 初始化列表信息\nconst projectsState: ExploreRecommendProjectsState =\n  exploreRecommendProjectsEntity.getInitialState({\n    status: AsyncRequestStatus.IDLE,\n    errorMsg: '',\n    currentRequestId: undefined,\n  });\n\nexport const fetchExploreRecommendProjects = createAsyncThunk<\n  FetchListThunkResp,\n  undefined,\n  {\n    rejectValue: FetchListThunkResp;\n  }\n>(\n  'explore/recommendProjects',\n  async (params, { rejectWithValue }) => {\n    try {\n      const resp = await fetchListForRecommendProjects();\n      return { data: resp.data.data || [] };\n    } catch (error: any) {\n      if (!error.response) {\n        throw error;\n      }\n      return rejectWithValue({ data: [], errorMsg: error.response.data });\n    }\n  },\n  {\n    condition: (params, { getState }) => {\n      const state = getState() as RootState;\n      const {\n        exploreRecommendProjects: { status },\n      } = state;\n      // 之前的请求正在进行中,则阻止新的请求\n      if (status === AsyncRequestStatus.PENDING) {\n        return false;\n      }\n      return true;\n    },\n  }\n);\n\nexport const exploreRecommendProjectsSlice = createSlice({\n  name: 'exploreRecommendProjects',\n  initialState: projectsState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchExploreRecommendProjects.pending, (state, action) => {\n        console.log('fetchExploreRecommendProjects.pending', action);\n        state.status = AsyncRequestStatus.PENDING;\n        state.errorMsg = '';\n        state.currentRequestId = action.meta.requestId;\n      })\n      .addCase(fetchExploreRecommendProjects.fulfilled, (state, action) => {\n        console.log('fetchExploreRecommendProjects.fulfilled', action);\n        const { requestId } = action.meta;\n        // 前后两次不同的请求，使用最后一次请求返回的数据\n        if (\n          state.currentRequestId !== requestId ||\n          state.status !== AsyncRequestStatus.PENDING\n        )\n          return;\n        state.status = AsyncRequestStatus.FULFILLED;\n        exploreRecommendProjectsEntity.setAll(state, action.payload.data);\n      })\n      .addCase(fetchExploreRecommendProjects.rejected, (state, action) => {\n        console.log('fetchExploreRecommendProjects.rejected', action);\n        const { requestId } = action.meta;\n        // 前后两次不同的请求，使用最后一次请求返回的数据\n        if (\n          state.currentRequestId !== requestId ||\n          state.status !== AsyncRequestStatus.PENDING\n        )\n          return;\n        state.status = AsyncRequestStatus.REJECTED;\n        exploreRecommendProjectsEntity.setAll(state, []);\n        if (action.payload) {\n          state.errorMsg = action.payload.errorMsg || '';\n        } else {\n          state.errorMsg = action.error.message || '';\n        }\n      });\n  },\n});\nexport const selectExploreRecommendProjectsState = (state: RootState) =>\n  state.exploreRecommendProjects;\nexport const { selectAll } = exploreRecommendProjectsEntity.getSelectors(\n  (state: RootState) => state.exploreRecommendProjects\n);\nconst { reducer } = exploreRecommendProjectsSlice;\nexport default reducer;\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\explore\\recommendTasksSlice.ts",["333","334","335","336"],[],"import {\n  EntityState,\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n} from '@reduxjs/toolkit';\nimport { fetchListForRecommendTasks } from '../../services/api/explore';\nimport type { RootState } from '../../store/store';\nimport { AsyncRequestStatus } from '../../types';\nimport { ExploreRecommendTaskItem } from '../../types/api';\n\nexport type ExploreRecommendTaskItemEntity = ExploreRecommendTaskItem;\ntype ExploreRecommendTasksState =\n  EntityState<ExploreRecommendTaskItemEntity> & {\n    status: AsyncRequestStatus;\n    errorMsg: string;\n    currentRequestId: string | undefined; // 当前正在请求的id(由createAsyncThunk生成的唯一id)\n  };\ntype FetchListThunkResp = {\n  data: ExploreRecommendTaskItemEntity[];\n  errorMsg?: string;\n};\n\n// 列表信息数据范式化\nexport const exploreRecommendTasksEntity =\n  createEntityAdapter<ExploreRecommendTaskItemEntity>({\n    selectId: (item) => item.id,\n  });\n\n// 初始化列表信息\nconst tasksState: ExploreRecommendTasksState =\n  exploreRecommendTasksEntity.getInitialState({\n    status: AsyncRequestStatus.IDLE,\n    errorMsg: '',\n    currentRequestId: undefined,\n  });\n\nexport const fetchExploreRecommendTasks = createAsyncThunk<\n  FetchListThunkResp,\n  undefined,\n  {\n    rejectValue: FetchListThunkResp;\n  }\n>(\n  'explore/recommendTasks',\n  async (params, { rejectWithValue }) => {\n    try {\n      const resp = await fetchListForRecommendTasks();\n      return { data: resp.data.data || [] };\n    } catch (error: any) {\n      if (!error.response) {\n        throw error;\n      }\n      return rejectWithValue({ data: [], errorMsg: error.response.data });\n    }\n  },\n  {\n    condition: (params, { getState }) => {\n      const state = getState() as RootState;\n      const {\n        exploreRecommendTasks: { status },\n      } = state;\n      // 之前的请求正在进行中,则阻止新的请求\n      if (status === AsyncRequestStatus.PENDING) {\n        return false;\n      }\n      return true;\n    },\n  }\n);\n\nexport const exploreRecommendTasksSlice = createSlice({\n  name: 'exploreRecommendTasks',\n  initialState: tasksState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchExploreRecommendTasks.pending, (state, action) => {\n        console.log('fetchExploreRecommendTasks.pending', action);\n        state.status = AsyncRequestStatus.PENDING;\n        state.errorMsg = '';\n        state.currentRequestId = action.meta.requestId;\n      })\n      .addCase(fetchExploreRecommendTasks.fulfilled, (state, action) => {\n        console.log('fetchExploreRecommendTasks.fulfilled', action);\n        const { requestId } = action.meta;\n        // 前后两次不同的请求，使用最后一次请求返回的数据\n        if (\n          state.currentRequestId !== requestId ||\n          state.status !== AsyncRequestStatus.PENDING\n        )\n          return;\n        state.status = AsyncRequestStatus.FULFILLED;\n        exploreRecommendTasksEntity.setAll(state, action.payload.data);\n      })\n      .addCase(fetchExploreRecommendTasks.rejected, (state, action) => {\n        console.log('fetchExploreRecommendTasks.rejected', action);\n        const { requestId } = action.meta;\n        // 前后两次不同的请求，使用最后一次请求返回的数据\n        if (\n          state.currentRequestId !== requestId ||\n          state.status !== AsyncRequestStatus.PENDING\n        )\n          return;\n        state.status = AsyncRequestStatus.REJECTED;\n        exploreRecommendTasksEntity.setAll(state, []);\n        if (action.payload) {\n          state.errorMsg = action.payload.errorMsg || '';\n        } else {\n          state.errorMsg = action.error.message || '';\n        }\n      });\n  },\n});\nexport const selectExploreRecommendTasksState = (state: RootState) =>\n  state.exploreRecommendTasks;\nexport const { selectAll } = exploreRecommendTasksEntity.getSelectors(\n  (state: RootState) => state.exploreRecommendTasks\n);\nconst { reducer } = exploreRecommendTasksSlice;\nexport default reducer;\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\explore\\searchProjectsSlice.ts",["337","338","339","340"],[],"import {\n  EntityState,\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n} from '@reduxjs/toolkit';\nimport { fetchListForSearchProjects } from '../../services/api/explore';\nimport type { RootState } from '../../store/store';\nimport { AsyncRequestStatus } from '../../types';\nimport {\n  ExploreSearchProjectItem,\n  ExploreSearchProjectsRequestParams,\n} from '../../types/api';\n\nexport type ExploreSearchProjectItemEntity = ExploreSearchProjectItem;\ntype ExploreSearchProjectsState =\n  EntityState<ExploreSearchProjectItemEntity> & {\n    status: AsyncRequestStatus;\n    errorMsg: string;\n    currentRequestId: string | undefined; // 当前正在请求的id(由createAsyncThunk生成的唯一id)\n  };\ntype FetchListThunkResp = {\n  data: ExploreSearchProjectItemEntity[];\n  errorMsg?: string;\n};\n\n// 列表信息数据范式化\nexport const exploreSearchProjectsEntity =\n  createEntityAdapter<ExploreSearchProjectItemEntity>({\n    selectId: (item) => item.id,\n  });\n\n// 初始化列表信息\nconst projectsState: ExploreSearchProjectsState =\n  exploreSearchProjectsEntity.getInitialState({\n    status: AsyncRequestStatus.IDLE,\n    errorMsg: '',\n    currentRequestId: undefined,\n  });\n\nexport const fetchExploreSearchProjects = createAsyncThunk<\n  FetchListThunkResp,\n  ExploreSearchProjectsRequestParams,\n  {\n    rejectValue: FetchListThunkResp;\n  }\n>(\n  'explore/searchProjects',\n  async (params, { rejectWithValue }) => {\n    try {\n      const resp = await fetchListForSearchProjects(params);\n      return { data: resp.data.data || [] };\n    } catch (error: any) {\n      if (!error.response) {\n        throw error;\n      }\n      return rejectWithValue({ data: [], errorMsg: error.response.data });\n    }\n  }\n  // {\n  //   condition: (params, { getState }) => {\n  //     const state = getState() as RootState\n  //     const {\n  //       exploreSearchProjects: { status },\n  //     } = state\n  //     // 之前的请求正在进行中,则阻止新的请求\n  //     if (status === AsyncRequestStatus.PENDING) {\n  //       return false\n  //     }\n  //     return true\n  //   },\n  // },\n);\n\nexport const exploreSearchProjectsSlice = createSlice({\n  name: 'exploreSearchProjects',\n  initialState: projectsState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchExploreSearchProjects.pending, (state, action) => {\n        console.log('fetchExploreSearchProjects.pending', action);\n        state.status = AsyncRequestStatus.PENDING;\n        state.errorMsg = '';\n        state.currentRequestId = action.meta.requestId;\n      })\n      .addCase(fetchExploreSearchProjects.fulfilled, (state, action) => {\n        console.log('fetchExploreSearchProjects.fulfilled', action);\n        const { requestId } = action.meta;\n        // 前后两次不同的请求，使用最后一次请求返回的数据\n        if (\n          state.currentRequestId !== requestId ||\n          state.status !== AsyncRequestStatus.PENDING\n        )\n          return;\n        state.status = AsyncRequestStatus.FULFILLED;\n        exploreSearchProjectsEntity.setAll(state, action.payload.data);\n      })\n      .addCase(fetchExploreSearchProjects.rejected, (state, action) => {\n        console.log('fetchExploreSearchProjects.rejected', action);\n        const { requestId } = action.meta;\n        // 前后两次不同的请求，使用最后一次请求返回的数据\n        if (\n          state.currentRequestId !== requestId ||\n          state.status !== AsyncRequestStatus.PENDING\n        )\n          return;\n        state.status = AsyncRequestStatus.REJECTED;\n        exploreSearchProjectsEntity.setAll(state, []);\n        if (action.payload) {\n          state.errorMsg = action.payload.errorMsg || '';\n        } else {\n          state.errorMsg = action.error.message || '';\n        }\n      });\n  },\n});\nexport const selectExploreSearchProjectsState = (state: RootState) =>\n  state.exploreSearchProjects;\nexport const { selectAll } = exploreSearchProjectsEntity.getSelectors(\n  (state: RootState) => state.exploreSearchProjects\n);\nconst { reducer } = exploreSearchProjectsSlice;\nexport default reducer;\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\explore\\searchTasksSlice.ts",["341","342","343","344"],[],"import {\n  EntityState,\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n} from '@reduxjs/toolkit';\nimport { fetchListForSearchTasks } from '../../services/api/explore';\nimport type { RootState } from '../../store/store';\nimport { AsyncRequestStatus } from '../../types';\nimport {\n  ExploreSearchTaskItem,\n  ExploreSearchTasksRequestParams,\n} from '../../types/api';\n\nexport type ExploreSearchTaskItemEntity = ExploreSearchTaskItem;\ntype ExploreSearchTasksState = EntityState<ExploreSearchTaskItemEntity> & {\n  status: AsyncRequestStatus;\n  errorMsg: string;\n  currentRequestId: string | undefined; // 当前正在请求的id(由createAsyncThunk生成的唯一id)\n};\ntype FetchListThunkResp = {\n  data: ExploreSearchTaskItemEntity[];\n  errorMsg?: string;\n};\n\n// 列表信息数据范式化\nexport const exploreSearchTasksEntity =\n  createEntityAdapter<ExploreSearchTaskItemEntity>({\n    selectId: (item) => item.id,\n  });\n\n// 初始化列表信息\nconst tasksState: ExploreSearchTasksState =\n  exploreSearchTasksEntity.getInitialState({\n    status: AsyncRequestStatus.IDLE,\n    errorMsg: '',\n    currentRequestId: undefined,\n  });\n\nexport const fetchExploreSearchTasks = createAsyncThunk<\n  FetchListThunkResp,\n  ExploreSearchTasksRequestParams,\n  {\n    rejectValue: FetchListThunkResp;\n  }\n>(\n  'explore/searchTasks',\n  async (params, { rejectWithValue }) => {\n    try {\n      const resp = await fetchListForSearchTasks(params);\n      return { data: resp.data.data || [] };\n    } catch (error: any) {\n      if (!error.response) {\n        throw error;\n      }\n      return rejectWithValue({ data: [], errorMsg: error.response.data });\n    }\n  }\n  // {\n  //   condition: (params, { getState }) => {\n  //     const state = getState() as RootState\n  //     const {\n  //       exploreSearchTasks: { status },\n  //     } = state\n  //     // 之前的请求正在进行中,则阻止新的请求\n  //     if (status === AsyncRequestStatus.PENDING) {\n  //       return false\n  //     }\n  //     return true\n  //   },\n  // },\n);\n\nexport const exploreSearchTasksSlice = createSlice({\n  name: 'exploreSearchTasks',\n  initialState: tasksState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchExploreSearchTasks.pending, (state, action) => {\n        console.log('fetchExploreSearchTasks.pending', action);\n        state.status = AsyncRequestStatus.PENDING;\n        state.errorMsg = '';\n        state.currentRequestId = action.meta.requestId;\n      })\n      .addCase(fetchExploreSearchTasks.fulfilled, (state, action) => {\n        console.log('fetchExploreSearchTasks.fulfilled', action);\n        const { requestId } = action.meta;\n        // 前后两次不同的请求，使用最后一次请求返回的数据\n        if (\n          state.currentRequestId !== requestId ||\n          state.status !== AsyncRequestStatus.PENDING\n        )\n          return;\n        state.status = AsyncRequestStatus.FULFILLED;\n        exploreSearchTasksEntity.setAll(state, action.payload.data);\n      })\n      .addCase(fetchExploreSearchTasks.rejected, (state, action) => {\n        console.log('fetchExploreSearchTasks.rejected', action);\n        const { requestId } = action.meta;\n        // 前后两次不同的请求，使用最后一次请求返回的数据\n        if (\n          state.currentRequestId !== requestId ||\n          state.status !== AsyncRequestStatus.PENDING\n        )\n          return;\n        state.status = AsyncRequestStatus.REJECTED;\n        exploreSearchTasksEntity.setAll(state, []);\n        if (action.payload) {\n          state.errorMsg = action.payload.errorMsg || '';\n        } else {\n          state.errorMsg = action.error.message || '';\n        }\n      });\n  },\n});\nexport const selectExploreSearchTasksState = (state: RootState) =>\n  state.exploreSearchTasks;\nexport const { selectAll } = exploreSearchTasksEntity.getSelectors(\n  (state: RootState) => state.exploreSearchTasks\n);\nconst { reducer } = exploreSearchTasksSlice;\nexport default reducer;\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\project\\projectDetailSlice.ts",["345","346","347","348","349"],[],"/*\n * @Author: shixuewen friendlysxw@163.com\n * @Date: 2022-07-21 17:08:46\n * @LastEditors: shixuewen friendlysxw@163.com\n * @LastEditTime: 2022-11-28 19:05:16\n * @Description: file description\n */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { fetchDetailByProjectSlug } from '../../services/api/project';\nimport type { RootState } from '../../store/store';\nimport { AsyncRequestStatus } from '../../types';\nimport { ProjectDetailResponse } from '../../types/api';\n\nexport type ProjectDetailEntity = ProjectDetailResponse;\ntype ProjectState = {\n  data: ProjectDetailEntity | null;\n  status: AsyncRequestStatus;\n  errorMsg: string;\n  currentRequestId: string | undefined; // 当前正在请求的id(由createAsyncThunk生成的唯一id)\n};\ntype FetchDetailResp = {\n  data: ProjectDetailEntity | null;\n  errorMsg?: string;\n};\n\n// 初始化数据\nconst initProjectState: ProjectState = {\n  data: null,\n  status: AsyncRequestStatus.IDLE,\n  errorMsg: '',\n  currentRequestId: undefined,\n};\n\nexport const fetchProjectDetail = createAsyncThunk<\n  FetchDetailResp,\n  string,\n  {\n    rejectValue: FetchDetailResp;\n  }\n>('project/fetchProjectDetail', async (slug, { rejectWithValue }) => {\n  try {\n    const resp = await fetchDetailByProjectSlug(slug);\n    return { data: resp.data.data || null };\n  } catch (error: any) {\n    if (!error.response) {\n      throw error;\n    }\n    return rejectWithValue({ data: null, errorMsg: error.response.data });\n  }\n});\n\nexport const projectDetailSlice = createSlice({\n  name: 'projectDetail',\n  initialState: initProjectState,\n  reducers: {\n    updateProjectDetail: (state, action) => {\n      state.data = { ...state.data, ...action.payload };\n    },\n    resetProjectDetailState: (state) => {\n      Object.assign(state, initProjectState);\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchProjectDetail.pending, (state, action) => {\n        console.log('fetchProjectDetail.pending', action);\n        state.status = AsyncRequestStatus.PENDING;\n        state.errorMsg = '';\n        state.currentRequestId = action.meta.requestId;\n      })\n      .addCase(fetchProjectDetail.fulfilled, (state, action) => {\n        console.log('fetchProjectDetail.fulfilled', action);\n        const { requestId } = action.meta;\n        // 前后两次不同的请求，使用最后一次请求返回的数据\n        if (\n          state.currentRequestId !== requestId ||\n          state.status !== AsyncRequestStatus.PENDING\n        )\n          return;\n        state.status = AsyncRequestStatus.FULFILLED;\n        state.data = action.payload.data;\n      })\n      .addCase(fetchProjectDetail.rejected, (state, action) => {\n        console.log('fetchProjectDetail.rejected', action);\n        const { requestId } = action.meta;\n        // 前后两次不同的请求，使用最后一次请求返回的数据\n        if (\n          state.currentRequestId !== requestId ||\n          state.status !== AsyncRequestStatus.PENDING\n        )\n          return;\n        state.status = AsyncRequestStatus.REJECTED;\n        state.data = null;\n        if (action.payload) {\n          state.errorMsg = action.payload.errorMsg || '';\n        } else {\n          state.errorMsg = action.error.message || '';\n        }\n      });\n  },\n});\n\nconst { actions, reducer } = projectDetailSlice;\nexport const selectProjectDetail = (state: RootState) => state.projectDetail;\nexport const { updateProjectDetail, resetProjectDetailState } = actions;\nexport default reducer;\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\task\\taskDetailSlice.ts",["350","351","352","353"],[],"/*\n * @Author: shixuewen friendlysxw@163.com\n * @Date: 2022-07-21 17:08:46\n * @LastEditors: shixuewen friendlysxw@163.com\n * @LastEditTime: 2022-11-28 19:05:22\n * @Description: file description\n */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { fetchDetail } from '../../services/api/task';\nimport type { RootState } from '../../store/store';\nimport { AsyncRequestStatus } from '../../types';\nimport { TaskDetailResponse, TodoTaskActionItem } from '../../types/api';\nimport { getTaskEntityForUpdateActionAfter } from '../../utils/task';\n\nexport type TaskDetailEntity = TaskDetailResponse;\ntype TaskState = {\n  data: TaskDetailEntity | null;\n  status: AsyncRequestStatus;\n  createStatus: AsyncRequestStatus;\n  errorMsg: string;\n  currentRequestId: string | undefined; // 当前正在请求的id(由createAsyncThunk生成的唯一id)\n};\ntype FetchDetailResp = {\n  data: TaskDetailEntity | null;\n  errorMsg?: string;\n};\n\n// 初始化数据\nconst initTaskState: TaskState = {\n  data: null,\n  status: AsyncRequestStatus.IDLE,\n  createStatus: AsyncRequestStatus.IDLE,\n  errorMsg: '',\n  currentRequestId: undefined,\n};\n\nexport const fetchTaskDetail = createAsyncThunk<\n  FetchDetailResp,\n  number,\n  {\n    rejectValue: FetchDetailResp;\n  }\n>('task/fetchTaskDetail', async (id, { rejectWithValue }) => {\n  try {\n    const resp = await fetchDetail(id);\n    return { data: resp.data.data || null };\n  } catch (error: any) {\n    if (!error.response) {\n      throw error;\n    }\n    return rejectWithValue({ data: null, errorMsg: error.response.data });\n  }\n});\n\nexport const taskDetailSlice = createSlice({\n  name: 'taskDetail',\n  initialState: initTaskState,\n  reducers: {\n    updateTaskDetail: (state, action) => {\n      state.data = { ...state.data, ...action.payload };\n    },\n    updateTaskDetailAction: (\n      state,\n      action: PayloadAction<TodoTaskActionItem>\n    ) => {\n      if (state.data) {\n        const task = state.data;\n        const newTask = getTaskEntityForUpdateActionAfter(\n          task,\n          action.payload\n        ) as TaskDetailEntity;\n        state.data = { ...newTask };\n      }\n    },\n    resetTaskDetailState: (state) => {\n      Object.assign(state, initTaskState);\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchTaskDetail.pending, (state, action) => {\n        console.log('fetchTaskDetail.pending', action);\n        state.status = AsyncRequestStatus.PENDING;\n        state.errorMsg = '';\n        state.currentRequestId = action.meta.requestId;\n      })\n      .addCase(fetchTaskDetail.fulfilled, (state, action) => {\n        console.log('fetchTaskDetail.fulfilled', action);\n        const { requestId } = action.meta;\n        // 前后两次不同的请求，使用最后一次请求返回的数据\n        if (\n          state.currentRequestId !== requestId ||\n          state.status !== AsyncRequestStatus.PENDING\n        )\n          return;\n        state.status = AsyncRequestStatus.FULFILLED;\n        state.data = action.payload.data;\n      })\n      .addCase(fetchTaskDetail.rejected, (state, action) => {\n        console.log('fetchTaskDetail.rejected', action);\n        const { requestId } = action.meta;\n        // 前后两次不同的请求，使用最后一次请求返回的数据\n        if (\n          state.currentRequestId !== requestId ||\n          state.status !== AsyncRequestStatus.PENDING\n        )\n          return;\n        state.status = AsyncRequestStatus.REJECTED;\n        state.data = null;\n        if (action.payload) {\n          state.errorMsg = action.payload.errorMsg || '';\n        } else {\n          state.errorMsg = action.error.message || '';\n        }\n      });\n  },\n});\n\nconst { actions, reducer } = taskDetailSlice;\nexport const selectTaskDetail = (state: RootState) => state.taskDetail;\nexport const {\n  updateTaskDetail,\n  updateTaskDetailAction,\n  resetTaskDetailState,\n} = actions;\nexport default reducer;\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\user\\checkinCommunitiesSlice.ts",["354"],[],"/*\n * @Author: shixuewen friendlysxw@163.com\n * @Date: 2022-08-29 14:40:44\n * @LastEditors: shixuewen friendlysxw@163.com\n * @LastEditTime: 2022-11-28 19:05:29\n * @Description: file description\n */\nimport {\n  EntityState,\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n  PayloadAction,\n} from '@reduxjs/toolkit';\nimport type { RootState } from '../../store/store';\nimport { AsyncRequestStatus } from '../../types';\n\nexport type CommunityCheckinItemForEntity = {\n  communityId: number;\n  seqDays: number;\n  contribution: number;\n};\ntype CommunitysState = EntityState<CommunityCheckinItemForEntity> & {\n  status: AsyncRequestStatus;\n  errorMsg: string;\n  currentRequestId: string | undefined; // 当前正在请求的id(由createAsyncThunk生成的唯一id)\n};\n\n// 列表信息，标准化数据为实体对象\nexport const userCheckinCommunitiesEntity =\n  createEntityAdapter<CommunityCheckinItemForEntity>({\n    selectId: (item) => item.communityId,\n  });\n// 初始化列表信息\nconst communitysState: CommunitysState =\n  userCheckinCommunitiesEntity.getInitialState({\n    status: AsyncRequestStatus.FULFILLED,\n    errorMsg: '',\n    currentRequestId: undefined,\n  });\n\nexport const userCheckinCommunitiesSlice = createSlice({\n  name: 'userCheckinCommunities',\n  initialState: communitysState,\n  reducers: {\n    addOne: (state, action: PayloadAction<CommunityCheckinItemForEntity>) => {\n      const one = action.payload;\n      userCheckinCommunitiesEntity.addOne(state, one);\n    },\n    removeAll: (state) => {\n      userCheckinCommunitiesEntity.removeAll(state);\n    },\n  },\n});\n\nexport const { selectAll, selectIds, selectById } =\n  userCheckinCommunitiesEntity.getSelectors(\n    (state: RootState) => state.userCheckinCommunities\n  );\nexport const selecteCheckinState = (state: RootState) =>\n  state.userCheckinCommunities;\nconst { reducer, actions } = userCheckinCommunitiesSlice;\nexport const { addOne, removeAll } = actions;\nexport default reducer;\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\user\\communityHandlesSlice.ts",["355","356","357","358","359","360","361","362","363","364","365","366","367"],[],"/*\n * @Author: shixuewen friendlysxw@163.com\n * @Date: 2022-07-15 15:31:38\n * @LastEditors: shixuewen friendlysxw@163.com\n * @LastEditTime: 2022-11-28 19:05:39\n * @Description: file description\n */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport fileDownload from 'js-file-download';\nimport { toast } from 'react-toastify';\nimport {\n  checkinCommunity,\n  downloadContributions,\n  followCommunity,\n  FollowCommunityParams,\n  verifyCommunityCheckin,\n} from '../../services/api/community';\nimport type { RootState } from '../../store/store';\nimport { AsyncRequestStatus } from '../../types';\nimport { fetchCommunityContributionRanks } from '../community/contributionRanksSlice';\nimport { fetchUserContributon } from '../contribution/userContributionSlice';\nimport { addOne as addOneForCheckinCommunities } from './checkinCommunitiesSlice';\nimport {\n  addOne as addOneForFollowedCommunities,\n  fetchFollowedCommunities,\n} from './followedCommunitiesSlice';\n// 每一种操作单独存储当前的数据状态\nexport type CommunityHandle<T> = {\n  params: T | null;\n  status: AsyncRequestStatus;\n  errorMsg: string;\n};\nconst initCommunityHandlestate = {\n  params: null,\n  status: AsyncRequestStatus.IDLE,\n  errorMsg: '',\n};\n// 将操作集合到一起，统一管理\nexport type UserCommunityHandlesStateType = {\n  follow: CommunityHandle<FollowCommunityParams>;\n  downloadContributionTokens: CommunityHandle<number>;\n  verifyCheckin: CommunityHandle<{ communityId?: number; slug?: string }>;\n  checkin: CommunityHandle<number> & {\n    openClaimModal?: boolean;\n  };\n};\nconst initUserCommunityHandlesState: UserCommunityHandlesStateType = {\n  follow: initCommunityHandlestate,\n  downloadContributionTokens: initCommunityHandlestate,\n  verifyCheckin: initCommunityHandlestate,\n  checkin: initCommunityHandlestate,\n};\nexport const follow = createAsyncThunk(\n  'user/communityHandles/follow',\n  async (params: FollowCommunityParams, { dispatch }) => {\n    const resp = await followCommunity(params);\n    if (resp.data.code === 0) {\n      const addFollowedCommunity = { id: params.id };\n      dispatch(addOneForFollowedCommunities(addFollowedCommunity));\n      dispatch(fetchFollowedCommunities());\n    } else {\n      throw new Error(resp.data.msg);\n    }\n  }\n);\nexport const downloadContributionTokens = createAsyncThunk(\n  'user/communityHandles/downloadContributionTokens',\n  async (communityId: number) => {\n    const resp = await downloadContributions(communityId);\n    fileDownload(resp.data, 'contribution_tokens.csv');\n  }\n);\n\nexport const verifyCheckin = createAsyncThunk(\n  'user/communityHandles/verifyCheckin',\n  async (communityId: number, { dispatch, getState }) => {\n    const resp = await verifyCommunityCheckin(communityId);\n    if (resp.data.code === 0) {\n      if (resp.data.data === 1) {\n        const addCheckinCommunity = {\n          communityId,\n          seqDays: 1,\n          contribution: 0,\n        };\n        dispatch(addOneForCheckinCommunities(addCheckinCommunity));\n      }\n    } else {\n      throw new Error(resp.data.msg);\n    }\n  }\n);\n\nexport const checkin = createAsyncThunk(\n  'user/communityHandles/checkin',\n  async (\n    { communityId, slug }: { communityId: number; slug?: string },\n    { dispatch }\n  ) => {\n    const resp = await checkinCommunity(communityId);\n    if (resp.data.code === 0) {\n      const { seqDays, contribution } = resp.data.data;\n      const addCheckinCommunity = {\n        communityId,\n        seqDays: seqDays || 0,\n        contribution: contribution || 0,\n      };\n      dispatch(addOneForCheckinCommunities(addCheckinCommunity));\n      if (slug) {\n        dispatch(fetchCommunityContributionRanks(slug));\n        dispatch(fetchUserContributon(slug));\n      }\n      toast.success(\n        `Got ${addCheckinCommunity.contribution} contribution scores!`\n      );\n      dispatch(setCheckinOpenClaimModal(true));\n      setTimeout(() => {\n        dispatch(setCheckinOpenClaimModal(false));\n      }, 3000);\n    } else {\n      throw new Error(resp.data.msg);\n    }\n  }\n);\nexport const userCommunityHandlesSlice = createSlice({\n  name: 'CommunityHandles',\n  initialState: initUserCommunityHandlesState,\n  reducers: {\n    resetVerifyCheckin: (state) => {\n      Object.assign(state.verifyCheckin, initCommunityHandlestate);\n    },\n    setCheckinOpenClaimModal: (state, action: PayloadAction<boolean>) => {\n      state.checkin.openClaimModal = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(follow.pending, (state, action) => {\n        console.log('follow pending', action);\n        state.follow.params = action.meta.arg;\n        state.follow.status = AsyncRequestStatus.PENDING;\n        state.follow.errorMsg = '';\n      })\n      .addCase(follow.fulfilled, (state, action) => {\n        console.log('follow fulfilled', action);\n        state.follow.params = null;\n        state.follow.status = AsyncRequestStatus.FULFILLED;\n        state.follow.errorMsg = '';\n        toast.success('apply success');\n      })\n      .addCase(follow.rejected, (state, action) => {\n        console.log('follow rejected', action);\n        state.follow.params = null;\n        state.follow.status = AsyncRequestStatus.REJECTED;\n        state.follow.errorMsg = action.error.message || '';\n        toast.error(action.error.message);\n      })\n      .addCase(verifyCheckin.pending, (state, action) => {\n        console.log('verifyCheckin pending', action);\n        state.verifyCheckin.status = AsyncRequestStatus.PENDING;\n        state.verifyCheckin.errorMsg = '';\n      })\n      .addCase(verifyCheckin.fulfilled, (state, action) => {\n        console.log('verifyCheckin fulfilled', action);\n        state.verifyCheckin.params = null;\n        state.verifyCheckin.status = AsyncRequestStatus.FULFILLED;\n        state.verifyCheckin.errorMsg = '';\n      })\n      .addCase(verifyCheckin.rejected, (state, action) => {\n        console.log('verifyCheckin rejected', action);\n        state.verifyCheckin.params = null;\n        state.verifyCheckin.status = AsyncRequestStatus.REJECTED;\n        state.verifyCheckin.errorMsg = action.error.message || '';\n        toast.error(action.error.message);\n      })\n      .addCase(checkin.pending, (state, action) => {\n        console.log('checkin pending', action);\n        state.checkin.status = AsyncRequestStatus.PENDING;\n        state.checkin.errorMsg = '';\n      })\n      .addCase(checkin.fulfilled, (state, action) => {\n        console.log('checkin fulfilled', action);\n        state.checkin.params = null;\n        state.checkin.status = AsyncRequestStatus.FULFILLED;\n        state.checkin.errorMsg = '';\n      })\n      .addCase(checkin.rejected, (state, action) => {\n        console.log('checkin rejected', action);\n        state.checkin.params = null;\n        state.checkin.status = AsyncRequestStatus.REJECTED;\n        state.checkin.errorMsg = action.error.message || '';\n        toast.error(action.error.message);\n      })\n      .addCase(downloadContributionTokens.pending, (state, action) => {\n        console.log('downloadContributionTokens pending', action);\n        state.downloadContributionTokens.params = action.meta.arg;\n        state.downloadContributionTokens.status = AsyncRequestStatus.PENDING;\n        state.downloadContributionTokens.errorMsg = '';\n      })\n      .addCase(downloadContributionTokens.fulfilled, (state, action) => {\n        console.log('downloadContributionTokens fulfilled', action);\n        state.downloadContributionTokens.params = null;\n        state.downloadContributionTokens.status = AsyncRequestStatus.FULFILLED;\n        state.downloadContributionTokens.errorMsg = '';\n        toast.success('download tokens success');\n      })\n      .addCase(downloadContributionTokens.rejected, (state, action) => {\n        console.log('downloadContributionTokens rejected', action);\n        state.downloadContributionTokens.params = null;\n        state.downloadContributionTokens.status = AsyncRequestStatus.REJECTED;\n        state.downloadContributionTokens.errorMsg = action.error.message || '';\n        toast.error(action.error.message);\n      });\n  },\n});\n\nexport const selectUserCommunityHandlesState = (state: RootState) =>\n  state.userCommunityHandles;\n\nconst { actions, reducer } = userCommunityHandlesSlice;\nexport const { resetVerifyCheckin, setCheckinOpenClaimModal } = actions;\nexport default reducer;\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\user\\followedCommunitiesSlice.ts",["368","369","370","371"],[],"import {\n  EntityState,\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n} from '@reduxjs/toolkit';\nimport { fetchListForUserFollowedCommunity } from '../../services/api/community';\nimport type { RootState } from '../../store/store';\nimport { AsyncRequestStatus } from '../../types';\nimport type { FollowedCommunityItem } from '../../types/api';\n\nexport type FollowedCommunitityForEntity = FollowedCommunityItem;\ntype FollowedCommunityListState = EntityState<FollowedCommunitityForEntity> & {\n  status: AsyncRequestStatus;\n  errorMsg: string;\n  currentRequestId: string | undefined; // 当前正在请求的id(由createAsyncThunk生成的唯一id)\n};\nexport const userFollowedCommunitiesEntity =\n  createEntityAdapter<FollowedCommunitityForEntity>({\n    selectId: (item) => item.id,\n  });\nconst initTodoTasksState: FollowedCommunityListState =\n  userFollowedCommunitiesEntity.getInitialState({\n    status: AsyncRequestStatus.IDLE,\n    errorMsg: '',\n    currentRequestId: undefined,\n  });\n\ntype FetchFollowedCommunitiesResp = {\n  data: FollowedCommunityItem[];\n  errorMsg?: string;\n};\n\nexport const fetchFollowedCommunities = createAsyncThunk<\n  FetchFollowedCommunitiesResp,\n  undefined,\n  {\n    rejectValue: FetchFollowedCommunitiesResp;\n  }\n>('user/followedCommunities/fetchList', async (params, { rejectWithValue }) => {\n  try {\n    const resp = await fetchListForUserFollowedCommunity();\n    return { data: resp.data.data || [] };\n  } catch (error: any) {\n    if (!error.response) {\n      throw error;\n    }\n    return rejectWithValue({\n      data: [],\n      errorMsg: error.response.data,\n    });\n  }\n});\n\nexport const userFollowedCommunitiesSlice = createSlice({\n  name: 'userFollowedCommunities',\n  initialState: initTodoTasksState,\n  reducers: {\n    addOne: (state, action) => {\n      const one = action.payload;\n      userFollowedCommunitiesEntity.addOne(state, one);\n    },\n    removeOne: (state, action) => {\n      const id = action.payload;\n      userFollowedCommunitiesEntity.removeOne(state, id);\n    },\n    updateOne: (state, action) => {\n      const one = action.payload;\n      userFollowedCommunitiesEntity.upsertOne(state, one);\n    },\n    removeAll: (state) => {\n      userFollowedCommunitiesEntity.removeAll(state);\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchFollowedCommunities.pending, (state, action) => {\n        console.log('fetchFollowedCommunities.pending', action);\n        state.status = AsyncRequestStatus.PENDING;\n        state.errorMsg = '';\n        state.currentRequestId = action.meta.requestId;\n      })\n      .addCase(fetchFollowedCommunities.fulfilled, (state, action) => {\n        console.log('fetchFollowedCommunities.fulfilled', action);\n        const { requestId } = action.meta;\n        // 前后两次不同的请求，使用最后一次请求返回的数据\n        if (\n          state.currentRequestId !== requestId ||\n          state.status !== AsyncRequestStatus.PENDING\n        )\n          return;\n        state.status = AsyncRequestStatus.FULFILLED;\n        // set data\n        userFollowedCommunitiesEntity.setAll(state, action.payload.data);\n      })\n      .addCase(fetchFollowedCommunities.rejected, (state, action) => {\n        console.log('fetchFollowedCommunities.rejected', action);\n        const { requestId } = action.meta;\n        // 前后两次不同的请求，使用最后一次请求返回的数据\n        if (\n          state.currentRequestId !== requestId ||\n          state.status !== AsyncRequestStatus.PENDING\n        )\n          return;\n        state.status = AsyncRequestStatus.REJECTED;\n        userFollowedCommunitiesEntity.setAll(state, []);\n        if (action.payload) {\n          state.errorMsg = action.payload.errorMsg || '';\n        } else {\n          state.errorMsg = action.error.message || '';\n        }\n      });\n  },\n});\n\nconst { actions, reducer } = userFollowedCommunitiesSlice;\nexport const selectUserFollowedCommunitiesState = (state: RootState) =>\n  state.userFollowedCommunities;\nexport const { selectAll, selectIds } =\n  userFollowedCommunitiesEntity.getSelectors(\n    (state: RootState) => state.userFollowedCommunities\n  );\nexport const { addOne, removeOne, updateOne, removeAll } = actions;\nexport default reducer;\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\user\\projectHandlesSlice.ts",["372","373","374","375","376"],[],"/*\n * @Author: shixuewen friendlysxw@163.com\n * @Date: 2022-07-15 15:31:38\n * @LastEditors: shixuewen friendlysxw@163.com\n * @LastEditTime: 2022-11-28 19:07:22\n * @Description: file description\n */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { toast } from 'react-toastify';\nimport { applyForVerificationByProjectId } from '../../services/api/project';\nimport type { RootState } from '../../store/store';\nimport { AsyncRequestStatus } from '../../types';\nimport { GradeType } from '../../types/entities';\nimport { updateProjectDetail } from '../project/projectDetailSlice';\n// 每一种操作单独存储当前的数据状态\nexport type ProjectHandle<T> = {\n  params: T | null;\n  status: AsyncRequestStatus;\n  errorMsg: string;\n};\nconst initProjectHandlestate = {\n  params: null,\n  status: AsyncRequestStatus.IDLE,\n  errorMsg: '',\n};\n// 将操作集合到一起，统一管理\nexport type UserProjectHandlesStateType = {\n  applyForVerification: ProjectHandle<number>;\n};\nconst initUserProjectHandlesState: UserProjectHandlesStateType = {\n  applyForVerification: initProjectHandlestate,\n};\n\nexport const applyForVerification = createAsyncThunk(\n  'user/projectHandles/applyForVerification',\n  async (projectId: number, { dispatch }) => {\n    const resp = await applyForVerificationByProjectId(projectId);\n    if (resp.data.code === 0) {\n      dispatch(updateProjectDetail({ grade: GradeType.OFFICIAL }));\n    } else {\n      throw new Error(resp.data.msg);\n    }\n  }\n);\nexport const userProjectHandlesSlice = createSlice({\n  name: 'ProjectHandles',\n  initialState: initUserProjectHandlesState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(applyForVerification.pending, (state, action) => {\n        console.log('applyForVerification pending', action);\n        state.applyForVerification.status = AsyncRequestStatus.PENDING;\n        state.applyForVerification.errorMsg = '';\n      })\n      .addCase(applyForVerification.fulfilled, (state, action) => {\n        console.log('applyForVerification fulfilled', action);\n        state.applyForVerification.params = null;\n        state.applyForVerification.status = AsyncRequestStatus.FULFILLED;\n        state.applyForVerification.errorMsg = '';\n        toast.success('apply success');\n      })\n      .addCase(applyForVerification.rejected, (state, action) => {\n        console.log('applyForVerification rejected', action);\n        state.applyForVerification.params = null;\n        state.applyForVerification.status = AsyncRequestStatus.REJECTED;\n        state.applyForVerification.errorMsg = action.error.message || '';\n        toast.error(action.error.message);\n      });\n  },\n});\n\nexport const selectUserProjectHandlesState = (state: RootState) =>\n  state.userProjectHandles;\n\nconst { actions, reducer } = userProjectHandlesSlice;\nexport default reducer;\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\user\\taskHandlesSlice.ts",["377","378","379","380","381","382","383","384","385","386","387"],[],"/*\n * @Author: shixuewen friendlysxw@163.com\n * @Date: 2022-07-12 14:53:33\n * @LastEditors: shixuewen friendlysxw@163.com\n * @LastEditTime: 2022-11-28 19:07:31\n * @Description: file description\n */\nimport {\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n  EntityState,\n} from '@reduxjs/toolkit';\nimport { toast } from 'react-toastify';\nimport {\n  completionOneAction,\n  confirmQuestionAction,\n  ResponseBizErrCode,\n  takeTask as takeTaskRquest,\n  verifyOneAction,\n  verifyOneTask,\n} from '../../services/api/task';\nimport type { RootState } from '../../store/store';\nimport { AsyncRequestStatus } from '../../types';\nimport { UserActionStatus } from '../../types/api';\nimport {\n  Action,\n  Task,\n  TaskAcceptedStatus,\n  TaskTodoCompleteStatus,\n} from '../../types/entities';\nimport {\n  fetchTaskDetail,\n  updateTaskDetail,\n  updateTaskDetailAction,\n} from '../task/taskDetailSlice';\nimport { fetchFollowedCommunities } from './followedCommunitiesSlice';\nimport {\n  fetchTodoTasks,\n  setOne as setOneForTodoTask,\n  updateOneAction,\n} from './todoTasksSlice';\n\n// create an execution queue for the verify task\nexport type VerifyTaskQueueEntity = Task;\ntype VerifyTaskQueueState = EntityState<VerifyTaskQueueEntity>;\nexport const verifyTaskQueueEntity = createEntityAdapter<VerifyTaskQueueEntity>(\n  {\n    selectId: (item) => item.id,\n  }\n);\nconst verifyTaskQueueState: VerifyTaskQueueState =\n  verifyTaskQueueEntity.getInitialState();\n\n// create an execution queue for the verify action\nexport type VerifyActionQueueEntity = Action;\ntype VerifyActionQueueState = EntityState<VerifyActionQueueEntity>;\nexport const verifyActionQueueEntity =\n  createEntityAdapter<VerifyActionQueueEntity>({\n    selectId: (item) => item.id,\n  });\nconst verifyActionQueueState: VerifyActionQueueState =\n  verifyActionQueueEntity.getInitialState();\n\n// unified management of task operations\nexport type TaskHandle<T> = {\n  params: T | null;\n  status: AsyncRequestStatus;\n  errorMsg: string;\n};\nexport type TakeTaskParams = {\n  id: number;\n};\nexport type UserTaskHandlesStateType = {\n  takeTask: TaskHandle<TakeTaskParams>;\n  verifyTask: TaskHandle<Task>;\n  verifyTaskQueue: VerifyTaskQueueState;\n  verifyAction: TaskHandle<Action>;\n  verifyActionQueue: VerifyActionQueueState;\n};\n// init data\nconst initTaskHandlestate = {\n  params: null,\n  status: AsyncRequestStatus.IDLE,\n  errorMsg: '',\n};\nconst initUserTaskHandlesState: UserTaskHandlesStateType = {\n  takeTask: initTaskHandlestate,\n  verifyTask: initTaskHandlestate,\n  verifyTaskQueue: verifyTaskQueueState,\n  verifyAction: initTaskHandlestate,\n  verifyActionQueue: verifyActionQueueState,\n};\n\n// take task\nexport const takeTask = createAsyncThunk(\n  'user/taskHandles/takeTask',\n  async (params: TakeTaskParams, { dispatch }) => {\n    const resp = await takeTaskRquest(params);\n    if (resp.data.code === 0) {\n      const updateTask = {\n        id: params.id,\n        acceptedStatus: TaskAcceptedStatus.DONE,\n        status: TaskTodoCompleteStatus.TODO,\n      };\n      dispatch(updateTaskDetail(updateTask));\n      dispatch(fetchTaskDetail(params.id));\n      dispatch(fetchTodoTasks());\n      dispatch(fetchFollowedCommunities());\n    } else {\n      throw new Error(resp.data.msg);\n    }\n  }\n);\n\n// verify task\nexport const verifyTask = createAsyncThunk(\n  'user/taskHandles/verifyTask',\n  async (task: Task, { dispatch }) => {\n    const { id } = task;\n    dispatch(addOneVerifyTaskQueue(task));\n    const resp = await verifyOneTask({ id });\n    if (resp.data.code === 0 && resp.data.data) {\n      dispatch(updateTaskDetail(resp.data.data));\n      dispatch(setOneForTodoTask(resp.data.data));\n      dispatch(removeOneVerifyTaskQueue(id));\n    } else {\n      dispatch(removeOneVerifyTaskQueue(id));\n      throw new Error(resp.data.msg);\n    }\n  },\n  {\n    condition: (task: Task, { getState }) => {\n      const state = getState() as RootState;\n      const { selectById } = verifyTaskQueueEntity.getSelectors();\n      const item = selectById(state.userTaskHandles.verifyTaskQueue, task.id);\n      // 如果此 task 正在 verify task 的队列中则阻止新的verify请求\n      return !item;\n    },\n  }\n);\n\n// verify action\nexport const verifyAction = createAsyncThunk(\n  'user/taskHandles/verifyAction',\n  async (action: Action, { dispatch }) => {\n    const { id, taskId } = action;\n    dispatch(addOneVerifyActionQueue(action));\n    const resp = await verifyOneAction({ id, taskId });\n    if (resp.data.code === 0 && resp.data.data) {\n      dispatch(updateTaskDetailAction(resp.data.data));\n      dispatch(updateOneAction(resp.data.data));\n      dispatch(removeOneVerifyActionQueue(id));\n    } else {\n      dispatch(removeOneVerifyActionQueue(id));\n      throw new Error(resp.data.msg);\n    }\n  },\n  {\n    condition: (action: Action, { getState }) => {\n      const state = getState() as RootState;\n      const { selectById } = verifyActionQueueEntity.getSelectors();\n      const item = selectById(\n        state.userTaskHandles.verifyActionQueue,\n        action.id\n      );\n      // 如果此 action 正在 verify action 的队列中则阻止新的verify请求\n      return !item;\n    },\n  }\n);\n\n// completion action\nexport const completionAction = createAsyncThunk(\n  'user/taskHandles/completionAction',\n  async (action: Action, { dispatch }) => {\n    const { id, taskId } = action;\n    dispatch(addOneVerifyActionQueue(action));\n    const resp = await completionOneAction({ id, taskId });\n    if (resp.data.code === 0 && resp.data.data) {\n      dispatch(updateTaskDetailAction(resp.data.data));\n      dispatch(updateOneAction(resp.data.data));\n      dispatch(removeOneVerifyActionQueue(id));\n    } else {\n      dispatch(removeOneVerifyActionQueue(id));\n      throw new Error(resp.data.msg);\n    }\n  },\n  {\n    condition: (action: Action, { getState }) => {\n      const state = getState() as RootState;\n      const { selectById } = verifyActionQueueEntity.getSelectors();\n      const item = selectById(\n        state.userTaskHandles.verifyActionQueue,\n        action.id\n      );\n      // 如果此 action 正在 verify action 的队列中则阻止新的verify请求\n      return !item;\n    },\n  }\n);\n\n// question verify confirm action\nexport const questionVerifyConfirmAction = createAsyncThunk(\n  'user/taskHandles/questionConfirmVerifyAction',\n  async (\n    params: {\n      action: Action;\n      answer: string;\n      callback: (assertAnswer: boolean) => void;\n    },\n    { dispatch }\n  ) => {\n    const { action, answer, callback } = params;\n    const { id, taskId } = action;\n    dispatch(addOneVerifyActionQueue(action));\n    const resp = await confirmQuestionAction({ id, taskId, answer });\n    if (resp.data.code === ResponseBizErrCode.ACTION_ANSWER_CORRECT) {\n      callback(true);\n      dispatch(\n        updateTaskDetailAction({\n          ...action,\n          status: UserActionStatus.DONE,\n          progress: '',\n        })\n      );\n      dispatch(\n        updateOneAction({\n          ...action,\n          status: UserActionStatus.DONE,\n          progress: '',\n        })\n      );\n      dispatch(removeOneVerifyActionQueue(id));\n      toast.success('Verified.');\n    } else {\n      dispatch(removeOneVerifyActionQueue(id));\n      callback(false);\n    }\n  },\n  {\n    condition: (params, { getState }) => {\n      const { action, answer } = params;\n      const state = getState() as RootState;\n      const { selectById } = verifyActionQueueEntity.getSelectors();\n      const item = selectById(\n        state.userTaskHandles.verifyActionQueue,\n        action.id\n      );\n      // 如果此 action 正在 verify action 的队列中则阻止新的verify请求\n      return !item;\n    },\n  }\n);\n// question confirm action\nexport const questionConfirmAction = createAsyncThunk(\n  'user/taskHandles/questionConfirmAction',\n  async (params: { action: Action; answer: string }, { dispatch }) => {\n    const { action, answer } = params;\n    const { id, taskId } = action;\n    const resp = await confirmQuestionAction({ id, taskId, answer });\n    if (resp.data.code === ResponseBizErrCode.ACTION_ANSWER_CORRECT) {\n      dispatch(\n        updateTaskDetailAction({\n          ...action,\n          status: UserActionStatus.TODO,\n          progress: '',\n          data: {\n            ...action.data,\n            answer,\n            nopassReason: '',\n          },\n        })\n      );\n      dispatch(\n        updateOneAction({\n          ...action,\n          status: UserActionStatus.TODO,\n          progress: '',\n          data: {\n            ...action.data,\n            answer,\n            nopassReason: '',\n          },\n        })\n      );\n      toast.success('Saved.');\n    } else {\n      toast.error('save error');\n    }\n  },\n  {\n    condition: (params: { action: Action; answer: string }, { getState }) => {\n      const { action, answer } = params;\n      const state = getState() as RootState;\n      const { selectById } = verifyActionQueueEntity.getSelectors();\n      const item = selectById(\n        state.userTaskHandles.verifyActionQueue,\n        action.id\n      );\n      // 如果此 action 正在 verify action 的队列中则阻止新的verify请求\n      return !item;\n    },\n  }\n);\n// question confirm action\nexport const uploadImageAction = createAsyncThunk(\n  'user/taskHandles/uploadImageAction',\n  async (params: { action: Action; url: string }, { dispatch }) => {\n    const { action, url: answer } = params;\n    const { id, taskId } = action;\n    const resp = await confirmQuestionAction({ id, taskId, answer });\n    if (resp.data.code === ResponseBizErrCode.ACTION_ANSWER_CORRECT) {\n      dispatch(\n        updateTaskDetailAction({\n          ...action,\n          status: UserActionStatus.TODO,\n          progress: '',\n          data: {\n            ...action.data,\n            answer,\n            nopassReason: '',\n          },\n        })\n      );\n      dispatch(\n        updateOneAction({\n          ...action,\n          status: UserActionStatus.TODO,\n          progress: '',\n          data: {\n            ...action.data,\n            answer,\n            nopassReason: '',\n          },\n        })\n      );\n      toast.success('Uploaded.');\n    } else {\n      toast.error('upload error');\n    }\n  },\n  {\n    condition: (params: { action: Action; url: string }, { getState }) => {\n      const { action, url } = params;\n      const state = getState() as RootState;\n      const { selectById } = verifyActionQueueEntity.getSelectors();\n      const item = selectById(\n        state.userTaskHandles.verifyActionQueue,\n        action.id\n      );\n      // 如果此 action 正在 verify action 的队列中则阻止新的verify请求\n      return !!url || !item;\n    },\n  }\n);\nexport const userTaskHandlesSlice = createSlice({\n  name: 'TaskHandles',\n  initialState: initUserTaskHandlesState,\n  reducers: {\n    addOneVerifyTaskQueue: (state, action) => {\n      verifyTaskQueueEntity.addOne(state.verifyTaskQueue, action.payload);\n    },\n    removeOneVerifyTaskQueue: (state, action) => {\n      verifyTaskQueueEntity.removeOne(state.verifyTaskQueue, action.payload);\n    },\n    addOneVerifyActionQueue: (state, action) => {\n      verifyActionQueueEntity.addOne(state.verifyActionQueue, action.payload);\n    },\n    removeOneVerifyActionQueue: (state, action) => {\n      verifyActionQueueEntity.removeOne(\n        state.verifyActionQueue,\n        action.payload\n      );\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(takeTask.pending, (state, action) => {\n        console.log('takeTask pending', action);\n        state.takeTask.params = action.meta.arg;\n        state.takeTask.status = AsyncRequestStatus.PENDING;\n        state.takeTask.errorMsg = '';\n      })\n      .addCase(takeTask.fulfilled, (state, action) => {\n        console.log('takeTask fulfilled', action);\n        state.takeTask.params = null;\n        state.takeTask.status = AsyncRequestStatus.FULFILLED;\n        state.takeTask.errorMsg = '';\n        toast.success('Applied.');\n      })\n      .addCase(takeTask.rejected, (state, action) => {\n        console.log('takeTask rejected', action);\n        state.takeTask.params = null;\n        state.takeTask.status = AsyncRequestStatus.REJECTED;\n        state.takeTask.errorMsg = action.error.message || '';\n        toast.error(action.error.message);\n      })\n      .addCase(verifyTask.pending, (state, action) => {\n        console.log('verifyTask pending', action);\n        state.verifyTask.params = action.meta.arg;\n        state.verifyTask.status = AsyncRequestStatus.PENDING;\n        state.verifyTask.errorMsg = '';\n      })\n      .addCase(verifyTask.fulfilled, (state, action) => {\n        console.log('verifyTask fulfilled', action);\n        state.verifyTask.params = null;\n        state.verifyTask.status = AsyncRequestStatus.FULFILLED;\n        state.verifyTask.errorMsg = '';\n        toast.success('Verified.');\n      })\n      .addCase(verifyTask.rejected, (state, action) => {\n        console.log('verifyTask rejected', action);\n        state.verifyTask.params = null;\n        state.verifyTask.status = AsyncRequestStatus.REJECTED;\n        state.verifyTask.errorMsg = action.error.message || '';\n        toast.error(action.error.message);\n      })\n      .addCase(verifyAction.pending, (state, action) => {\n        console.log('verifyAction pending', action);\n        state.verifyAction.params = action.meta.arg;\n        state.verifyAction.status = AsyncRequestStatus.PENDING;\n        state.verifyAction.errorMsg = '';\n      })\n      .addCase(verifyAction.fulfilled, (state, action) => {\n        console.log('verifyAction fulfilled', action);\n        state.verifyAction.params = null;\n        state.verifyAction.status = AsyncRequestStatus.FULFILLED;\n        state.verifyAction.errorMsg = '';\n        toast.success('Verified.');\n      })\n      .addCase(verifyAction.rejected, (state, action) => {\n        console.log('verifyAction rejected', action);\n        state.verifyAction.params = null;\n        state.verifyAction.status = AsyncRequestStatus.REJECTED;\n        state.verifyAction.errorMsg = action.error.message || '';\n        toast.error(action.error.message);\n      });\n  },\n});\n\nexport const selectUserTaskHandlesState = (state: RootState) =>\n  state.userTaskHandles;\n\nexport const {\n  selectAll: selectAllVerifyTaskQueue,\n  selectIds: selectIdsVerifyTaskQueue,\n  selectById: selectByIdVerifyTaskQueue,\n} = verifyTaskQueueEntity.getSelectors(\n  (state: RootState) => state.userTaskHandles.verifyTaskQueue\n);\n\nexport const {\n  selectAll: selectAllVerifyActionQueue,\n  selectIds: selectIdsVerifyActionQueue,\n  selectById: selectByIdVerifyActionQueue,\n} = verifyActionQueueEntity.getSelectors(\n  (state: RootState) => state.userTaskHandles.verifyActionQueue\n);\n\nconst { actions, reducer } = userTaskHandlesSlice;\nconst {\n  addOneVerifyTaskQueue,\n  removeOneVerifyTaskQueue,\n  addOneVerifyActionQueue,\n  removeOneVerifyActionQueue,\n} = actions;\n\nexport default reducer;\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\user\\todoTasksSlice.ts",["388","389","390","391"],[],"import {\n  EntityState,\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n  PayloadAction,\n} from '@reduxjs/toolkit';\nimport { fetchListForUserTodoTask } from '../../services/api/task';\nimport type { RootState } from '../../store/store';\nimport { AsyncRequestStatus } from '../../types';\nimport { TodoTaskActionItem, TodoTaskItem } from '../../types/api';\nimport { getTaskEntityForUpdateActionAfter } from '../../utils/task';\n\nexport type TodoTaskItemForEntity = TodoTaskItem;\ntype TodoTaskListState = EntityState<TodoTaskItemForEntity> & {\n  status: AsyncRequestStatus;\n  errorMsg: string;\n  currentRequestId: string | undefined; // 当前正在请求的id(由createAsyncThunk生成的唯一id)\n};\nexport const todoTasksEntity = createEntityAdapter<TodoTaskItemForEntity>({\n  selectId: (item) => item.id,\n});\nconst initTodoTasksState: TodoTaskListState = todoTasksEntity.getInitialState({\n  status: AsyncRequestStatus.IDLE,\n  errorMsg: '',\n  currentRequestId: undefined,\n});\n\ntype FetchTodoTasksResp = {\n  data: TodoTaskItem[];\n  errorMsg?: string;\n};\n\nexport const fetchTodoTasks = createAsyncThunk<\n  FetchTodoTasksResp,\n  undefined,\n  {\n    rejectValue: FetchTodoTasksResp;\n  }\n>('user/todoTasks/fetchList', async (params, { rejectWithValue }) => {\n  try {\n    const resp = await fetchListForUserTodoTask();\n    return { data: resp.data.data || [] };\n  } catch (error: any) {\n    if (!error.response) {\n      throw error;\n    }\n    return rejectWithValue({\n      data: [],\n      errorMsg: error.response.data,\n    });\n  }\n});\n\nexport const userTodoTasksSlice = createSlice({\n  name: 'UserTodoTasks',\n  initialState: initTodoTasksState,\n  reducers: {\n    updateOne: (...args) => todoTasksEntity.updateOne(...args),\n    setOne: (...args) => todoTasksEntity.setOne(...args),\n    removeAll: (state) => {\n      todoTasksEntity.removeAll(state);\n    },\n    updateOneAction: (state, action: PayloadAction<TodoTaskActionItem>) => {\n      const { taskId } = action.payload;\n      const { selectById } = todoTasksEntity.getSelectors();\n      const task = selectById(state, taskId);\n      if (task) {\n        const newTask = getTaskEntityForUpdateActionAfter(\n          task,\n          action.payload\n        ) as TodoTaskItemForEntity;\n        todoTasksEntity.setOne(state, newTask);\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchTodoTasks.pending, (state, action) => {\n        console.log('fetchTodoTasks.pending', action);\n        state.status = AsyncRequestStatus.PENDING;\n        state.errorMsg = '';\n        state.currentRequestId = action.meta.requestId;\n      })\n      .addCase(fetchTodoTasks.fulfilled, (state, action) => {\n        console.log('fetchTodoTasks.fulfilled', action);\n        const { requestId } = action.meta;\n        // 前后两次不同的请求，使用最后一次请求返回的数据\n        if (\n          state.currentRequestId !== requestId ||\n          state.status !== AsyncRequestStatus.PENDING\n        )\n          return;\n        state.status = AsyncRequestStatus.FULFILLED;\n        // set data\n        todoTasksEntity.setAll(state, action.payload.data);\n      })\n      .addCase(fetchTodoTasks.rejected, (state, action) => {\n        console.log('fetchTodoTasks.rejected', action);\n        const { requestId } = action.meta;\n        // 前后两次不同的请求，使用最后一次请求返回的数据\n        if (\n          state.currentRequestId !== requestId ||\n          state.status !== AsyncRequestStatus.PENDING\n        )\n          return;\n        state.status = AsyncRequestStatus.REJECTED;\n        todoTasksEntity.setAll(state, []);\n        if (action.payload) {\n          state.errorMsg = action.payload.errorMsg || '';\n        } else {\n          state.errorMsg = action.error.message || '';\n        }\n      });\n  },\n});\n\nconst { actions, reducer } = userTodoTasksSlice;\nexport const selectUserTodoTasksState = (state: RootState) =>\n  state.userTodoTasks;\nexport const { selectAll, selectById } = todoTasksEntity.getSelectors(\n  (state: RootState) => state.userTodoTasks\n);\nexport const { updateOne, setOne, updateOneAction, removeAll } = actions;\nexport default reducer;\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\user\\userRewardsSlice.ts",["392","393","394","395"],[],"import {\n  EntityState,\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n} from '@reduxjs/toolkit';\nimport { fetchListForUserReward } from '../../services/api/reward';\nimport type { RootState } from '../../store/store';\nimport { AsyncRequestStatus } from '../../types';\nimport { UserRewardItem } from '../../types/api';\n\nexport type UserRewardForEntity = UserRewardItem;\ntype RewardListState = EntityState<UserRewardForEntity> & {\n  status: AsyncRequestStatus;\n  errorMsg: string;\n  currentRequestId: string | undefined; // 当前正在请求的id(由createAsyncThunk生成的唯一id)\n};\nexport const userRewardsEntity = createEntityAdapter<UserRewardForEntity>({\n  selectId: (item) => item.id,\n});\nconst initTodoTasksState: RewardListState = userRewardsEntity.getInitialState({\n  status: AsyncRequestStatus.IDLE,\n  errorMsg: '',\n  currentRequestId: undefined,\n});\n\ntype FetchRewardsResp = {\n  data: UserRewardItem[];\n  errorMsg?: string;\n};\n\nexport const fetchUserRewards = createAsyncThunk<\n  FetchRewardsResp,\n  undefined,\n  {\n    rejectValue: FetchRewardsResp;\n  }\n>('user/rewards/fetchList', async (params, { rejectWithValue }) => {\n  try {\n    const resp = await fetchListForUserReward();\n    const data = resp.data.data || [];\n    return { data };\n  } catch (error: any) {\n    if (!error.response) {\n      throw error;\n    }\n    return rejectWithValue({\n      data: [],\n      errorMsg: error.response.data,\n    });\n  }\n});\n\nexport const userRewardsSlice = createSlice({\n  name: 'userRewards',\n  initialState: initTodoTasksState,\n  reducers: {\n    addOne: (state, action) => {\n      const one = action.payload;\n      userRewardsEntity.addOne(state, one);\n    },\n    removeOne: (state, action) => {\n      const id = action.payload;\n      userRewardsEntity.removeOne(state, id);\n    },\n    updateOne: (state, action) => {\n      const one = action.payload;\n      userRewardsEntity.upsertOne(state, one);\n    },\n    removeAll: (state) => {\n      userRewardsEntity.removeAll(state);\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchUserRewards.pending, (state, action) => {\n        console.log('fetchUserRewards.pending', action);\n        state.status = AsyncRequestStatus.PENDING;\n        state.errorMsg = '';\n        state.currentRequestId = action.meta.requestId;\n      })\n      .addCase(fetchUserRewards.fulfilled, (state, action) => {\n        console.log('fetchUserRewards.fulfilled', action);\n        const { requestId } = action.meta;\n        // 前后两次不同的请求，使用最后一次请求返回的数据\n        if (\n          state.currentRequestId !== requestId ||\n          state.status !== AsyncRequestStatus.PENDING\n        )\n          return;\n        state.status = AsyncRequestStatus.FULFILLED;\n        // set data\n        userRewardsEntity.setAll(state, action.payload.data);\n      })\n      .addCase(fetchUserRewards.rejected, (state, action) => {\n        console.log('fetchUserRewards.rejected', action);\n        const { requestId } = action.meta;\n        // 前后两次不同的请求，使用最后一次请求返回的数据\n        if (\n          state.currentRequestId !== requestId ||\n          state.status !== AsyncRequestStatus.PENDING\n        )\n          return;\n        state.status = AsyncRequestStatus.REJECTED;\n        userRewardsEntity.setAll(state, []);\n        if (action.payload) {\n          state.errorMsg = action.payload.errorMsg || '';\n        } else {\n          state.errorMsg = action.error.message || '';\n        }\n      });\n  },\n});\n\nconst { actions, reducer } = userRewardsSlice;\nexport const selectUserRewardsState = (state: RootState) => state.userRewards;\nexport const { selectAll, selectIds } = userRewardsEntity.getSelectors(\n  (state: RootState) => state.userRewards\n);\nexport const { addOne, removeOne, updateOne, removeAll } = actions;\nexport default reducer;\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\features\\website\\websiteSlice.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\GlobalStyle.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\index.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\useAccountOperationForChain.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\useContributionranks.ts",["396"],[],"/*\n * @Author: shixuewen friendlysxw@163.com\n * @Date: 2022-08-29 16:47:26\n * @LastEditors: shixuewen friendlysxw@163.com\n * @LastEditTime: 2022-11-28 18:37:01\n * @Description: file description\n */\nimport { useEffect, useRef } from 'react';\nimport {\n  fetchCommunityContributionRanks,\n  selectAll,\n  selecteContributionRanksState,\n} from '../features/community/contributionRanksSlice';\nimport { useAppDispatch, useAppSelector } from '../store/hooks';\n\nexport default (projectSlug?: string) => {\n  const dispatch = useAppDispatch();\n  const contributionranks = useAppSelector(selectAll);\n  const contributionranksState = useAppSelector(selecteContributionRanksState);\n  const fetchContributionranksIntervalRef = useRef<any>(null);\n  const dispatchContributionRanks = () =>\n    projectSlug && dispatch(fetchCommunityContributionRanks(projectSlug));\n  useEffect(() => {\n    if (projectSlug) {\n      dispatchContributionRanks();\n      fetchContributionranksIntervalRef.current = setInterval(() => {\n        dispatchContributionRanks();\n      }, 60 * 1000);\n    } else {\n      clearInterval(fetchContributionranksIntervalRef.current);\n    }\n    return () => {\n      clearInterval(fetchContributionranksIntervalRef.current);\n    };\n  }, [projectSlug]);\n\n  return { contributionranks, contributionranksState };\n};\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\useGoogleAnalytics.ts",["397"],[],"import React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport analytics from '../utils/analytics';\n\nexport const useGAPageView = (category = 'wl') => {\n  const location = useLocation();\n\n  React.useEffect(() => {\n    const currentPath = location.pathname + location.search;\n    analytics.sendPageview(currentPath);\n  }, [location]);\n};\n\nexport const useGAEvent = (category = 'wl') => {\n  const eventTracker = (\n    action = 'default action',\n    value: number | undefined = undefined\n  ) => {\n    analytics.sendEvent({ category, action, value });\n  };\n  return eventTracker;\n};\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\useHandleAction.ts",["398","399","400"],[],"/*\n * @Author: shixuewen friendlysxw@163.com\n * @Date: 2022-07-25 18:51:34\n * @LastEditors: shixuewen friendlysxw@163.com\n * @LastEditTime: 2022-11-28 18:22:29\n * @Description: file description\n */\nimport { useCallback, useEffect, useRef } from 'react';\nimport {\n  AccountType,\n  AuthorizerType,\n  useWlUserReact,\n  WlUserModalType,\n} from '@ecnft/wl-user-react';\nimport {\n  questionConfirmAction,\n  questionVerifyConfirmAction,\n  uploadImageAction,\n} from '../features/user/taskHandlesSlice';\nimport { useAppDispatch } from '../store/hooks';\nimport { Chain } from '../types/entities';\n\nconst ChainToAuthorizerTypeMap = {\n  [Chain.EVM]: AuthorizerType.METAMASK_WALLET,\n  [Chain.SOLANA]: AuthorizerType.PHANTOM_WALLET,\n  [Chain.APTOS]: AuthorizerType.MARTIAN_WALLET,\n};\nconst ChainToAccountTypeMap = {\n  [Chain.EVM]: AccountType.EVM,\n  [Chain.SOLANA]: AccountType.SOLANA,\n  [Chain.APTOS]: AccountType.APTOS,\n};\nexport default () => {\n  const { validateBindAccount, dispatchModal } = useWlUserReact();\n  const dispatch = useAppDispatch();\n  const handleActionToDiscord = useCallback(\n    (callback) => {\n      if (validateBindAccount(AccountType.DISCORD)) {\n        callback();\n      } else {\n        dispatchModal({\n          type: WlUserModalType.BIND,\n          payload: AuthorizerType.DISCORD,\n        });\n      }\n    },\n    [validateBindAccount, dispatchModal]\n  );\n  const handleActionToTwitter = useCallback(\n    (callback) => {\n      if (validateBindAccount(AccountType.TWITTER)) {\n        callback();\n      } else {\n        dispatchModal({\n          type: WlUserModalType.BIND,\n          payload: AuthorizerType.TWITTER,\n        });\n      }\n    },\n    [validateBindAccount, dispatchModal]\n  );\n  const handleActionQuestionConfirm = useCallback((action, answer) => {\n    dispatch(questionConfirmAction({ action, answer }));\n  }, []);\n  const handleActionVolidBindWalletForChain = useCallback(\n    (chain: Chain, callback) => {\n      const accountType = ChainToAccountTypeMap[chain];\n\n      if (validateBindAccount(accountType)) {\n        callback();\n      } else {\n        const signerType = ChainToAuthorizerTypeMap[chain];\n        console.log({\n          chain,\n          accountType,\n          signerType,\n        });\n        dispatchModal({ type: WlUserModalType.BIND, payload: signerType });\n      }\n    },\n    [validateBindAccount, dispatchModal]\n  );\n  const handleActionQuestionVerifyConfirm = useCallback(\n    (action, answer, callback) =>\n      dispatch(questionVerifyConfirmAction({ action, answer, callback })),\n    []\n  );\n  const handleActionUploadImage = useCallback((action, url) => {\n    dispatch(uploadImageAction({ action, url }));\n  }, []);\n  return {\n    handleActionToDiscord,\n    handleActionToTwitter,\n    handleActionQuestionConfirm,\n    handleActionQuestionVerifyConfirm,\n    handleActionVolidBindWalletForChain,\n    handleActionUploadImage,\n  };\n};\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\useInterval.ts",["401"],[],"import React, { useEffect, useRef } from 'react';\n\nfunction useInterval(callback: () => void, delay: number | null) {\n  const savedCallback = useRef(callback);\n\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (!delay && delay !== 0) {\n      return undefined;\n    }\n\n    const id = setInterval(() => savedCallback.current(), delay);\n\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\nexport default useInterval;\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\useRoute.ts",["402"],[],"/*\n * @Author: shixuewen friendlysxw@163.com\n * @Date: 2022-09-13 19:08:08\n * @LastEditors: shixuewen friendlysxw@163.com\n * @LastEditTime: 2022-09-14 11:06:59\n * @Description: file description\n */\nimport React, { useEffect, useState } from 'react';\nimport { matchRoutes, useLocation } from 'react-router-dom';\nimport {\n  CutomRouteObject,\n  permissionRoutes,\n  RouteKeys,\n  routes as routeAry,\n} from '../route/routes';\n\nfunction useRoute() {\n  const location = useLocation();\n  const [routeKey, setRouteKey] = useState<RouteKeys>(RouteKeys.noMatch);\n  useEffect(() => {\n    const match = matchRoutes([...permissionRoutes, ...routeAry], location);\n    if (!match) {\n      setRouteKey(RouteKeys.noMatch);\n    } else {\n      const { key } = match[0].route as CutomRouteObject;\n      setRouteKey(key || RouteKeys.noMatch);\n    }\n  }, [location]);\n  return { routeKey };\n}\n\nexport default useRoute;\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\useTimeCountdown.ts",["403","404"],[],"/*\n * @Author: shixuewen friendlysxw@163.com\n * @Date: 2022-09-02 14:35:06\n * @LastEditors: shixuewen friendlysxw@163.com\n * @LastEditTime: 2022-09-02 15:23:32\n * @Description: file description\n */\nimport React, { useEffect, useRef, useState } from 'react';\n\nconst defaultCountdownData = {\n  distance: 0,\n  day: 0,\n  hour: 0,\n  minute: 0,\n  second: 0,\n};\nfunction useTimeCountdown(timestamp: number) {\n  const [countdownData, setCountdownData] = useState(defaultCountdownData);\n  const countdownDataIntervalRef = useRef<any>(null);\n  useEffect(() => {\n    if (timestamp > Date.now()) {\n      countdownDataIntervalRef.current = setInterval(() => {\n        const distance = timestamp - Date.now();\n        const distanceDay = Math.floor(distance / (1000 * 60 * 60 * 24));\n        const distanceHour = Math.floor((distance / (1000 * 60 * 60)) % 24);\n        const distanceMinute = Math.floor((distance / (1000 * 60)) % 60);\n        const distanceSecond = Math.floor((distance / 1000) % 60);\n        setCountdownData({\n          distance,\n          day: distanceDay,\n          hour: distanceHour,\n          minute: distanceMinute,\n          second: distanceSecond,\n        });\n        if (distance === 0) {\n          clearInterval(countdownDataIntervalRef.current);\n        }\n      }, 1000);\n    } else {\n      clearInterval(countdownDataIntervalRef.current);\n      setCountdownData(defaultCountdownData);\n    }\n    return () => {\n      clearInterval(countdownDataIntervalRef.current);\n    };\n  }, [timestamp]);\n  return countdownData;\n}\n\nexport default useTimeCountdown;\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\useTodoTasksGroup.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\useUserHandlesForCommunity.ts",["405","406","407"],[],"/*\n * @Author: shixuewen friendlysxw@163.com\n * @Date: 2022-08-29 16:47:26\n * @LastEditors: shixuewen friendlysxw@163.com\n * @LastEditTime: 2022-11-28 13:37:04\n * @Description: file description\n */\nimport { useCallback, useEffect, useState } from 'react';\nimport { useWlUserReact } from '@ecnft/wl-user-react';\nimport { selectIds as selectIdsForFollowedCommunities } from '../features/user/followedCommunitiesSlice';\nimport {\n  removeAll,\n  selectById,\n  selectIds,\n} from '../features/user/checkinCommunitiesSlice';\nimport {\n  follow,\n  checkin,\n  resetVerifyCheckin,\n  verifyCheckin,\n  selectUserCommunityHandlesState,\n} from '../features/user/communityHandlesSlice';\nimport { useAppDispatch, useAppSelector } from '../store/hooks';\nimport { AsyncRequestStatus } from '../types';\n\nexport default (communityId?: number, slug?: string) => {\n  const { isLogin } = useWlUserReact();\n\n  const dispatch = useAppDispatch();\n  const handlesState = useAppSelector(selectUserCommunityHandlesState);\n  const {\n    follow: followState,\n    verifyCheckin: verifyCheckinState,\n    checkin: checkinState,\n  } = handlesState;\n\n  /** * follow community */\n  const userFollowedCommunityIds = useAppSelector(\n    selectIdsForFollowedCommunities\n  );\n  const isFollowed =\n    !!communityId && userFollowedCommunityIds.includes(communityId);\n  const handleFollow = useCallback(() => {\n    if (isLogin && communityId) {\n      dispatch(follow({ id: communityId }));\n    }\n  }, [isLogin, communityId, dispatch]);\n\n  /** * checkin community */\n  const userCheckinCommunityIds = useAppSelector(selectIds);\n  const isCheckedin =\n    !!communityId && userCheckinCommunityIds.includes(communityId);\n  const isVerifiedCheckin =\n    verifyCheckinState.status === AsyncRequestStatus.FULFILLED;\n  const userCheckedinCommunityData = useAppSelector((state) =>\n    selectById(state, communityId || -1)\n  );\n  const checkinData = {\n    contribution: userCheckedinCommunityData?.contribution || 0,\n    seqDays: userCheckedinCommunityData?.seqDays || 0,\n  };\n  const handleCheckin = useCallback(\n    () => isLogin && communityId && dispatch(checkin({ communityId, slug })),\n    [isLogin, communityId, slug, dispatch]\n  );\n\n  // verify check in\n  useEffect(() => {\n    if (\n      isLogin &&\n      communityId &&\n      isFollowed &&\n      !isCheckedin &&\n      verifyCheckinState.status === AsyncRequestStatus.IDLE\n    ) {\n      dispatch(verifyCheckin(communityId));\n    }\n  }, [\n    isLogin,\n    communityId,\n    isFollowed,\n    isCheckedin,\n    verifyCheckinState.status,\n  ]);\n\n  // empty check in\n  useEffect(() => {\n    if (!isLogin) {\n      dispatch(removeAll);\n    }\n  }, [isLogin]);\n\n  // reset verify in\n  useEffect(() => {\n    return () => {\n      dispatch(resetVerifyCheckin());\n    };\n  }, [communityId]);\n\n  return {\n    handlesState,\n    isFollowed,\n    handleFollow,\n    isCheckedin,\n    isVerifiedCheckin,\n    handleCheckin,\n    checkinData,\n  };\n};\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\hooks\\useWindowSize.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\react-app-env.d.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\reportWebVitals.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\request\\axios.ts",["408","409","410"],[],"/*\n * @Author: shixuewen friendlysxw@163.com\n * @Date: 2022-07-01 10:08:56\n * @LastEditors: shixuewen friendlysxw@163.com\n * @LastEditTime: 2022-11-28 18:42:30\n * @Description: axios 封装：凭证，参数序列化\n */\nimport axios, { AxiosRequestConfig, AxiosRequestHeaders } from 'axios';\nimport qs from 'qs';\nimport { WlUserReactContextType } from '@ecnft/wl-user-react';\nimport { API_BASE_URL } from '../constants';\n\nexport type AxiosCustomHeaderType = {\n  // 当前接口是否需要传递token\n  needToken?: boolean;\n  // 当前接口设置的token\n  token?: string;\n};\n\nexport type AxiosCustomConfigType = AxiosRequestConfig & {\n  headers?: AxiosRequestHeaders & AxiosCustomHeaderType;\n};\n\nlet store;\nexport const injectStore = (storeInstance: any) => {\n  store = storeInstance;\n};\n\n// 从外部注入wlUserReactProvider提供的功能数据 （为了在此文件中访问token等信息）\nlet wlUserReactContextValue: WlUserReactContextType | undefined;\nexport const injectWlUserReactContextValue = (value: any) => {\n  wlUserReactContextValue = value;\n};\nlet handleAxiosResponse401: () => void | undefined;\nexport const injectHandleAxiosResponse401 = (func: () => void) => {\n  handleAxiosResponse401 = func;\n};\n// axios 实例\nconst axiosInstance = axios.create();\n// 请求超时的毫秒数(0 表示无超时时间)\n// axiosInstance.defaults.timeout = 30000\n\n// 定义一个自定义HTTP状态码的错误范围，返回 `true`，promise 将被 resolve; 否则，promise 将被 rejecte\n// axiosInstance.defaults.validateStatus = (status) => status >= 200 && status <= 500 // 默认的\n\n// 跨域请求，允许保存cookie\n// axiosInstance.defaults.withCredentials = true\n\n// 由于代理导致前端路由解析不到 先加上`/api` 前缀的接口\n// axiosInstance.defaults.baseURL = process.env.NODE_ENV === 'development' ? '/api' : API_BASE_URL\naxiosInstance.defaults.baseURL = API_BASE_URL;\n\n// 添加请求拦截器\naxiosInstance.interceptors.request.use(\n  (config: AxiosCustomConfigType) => {\n    // 1、凭证\n    const { needToken } = config.headers || {};\n    // TODO 这里先默认加Authorization，后续优化\n    if (!config.headers) config.headers = {};\n    config.headers.Authorization = `Bearer `;\n    if (needToken && wlUserReactContextValue) {\n      const { isLogin, user } = wlUserReactContextValue;\n\n      const token = config.headers?.token || (isLogin ? user.token : ''); // token从store中获取\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    // 2、get请求，params参数序列化\n    if (config.method === 'get') {\n      config.paramsSerializer = (params) =>\n        qs.stringify(params, { arrayFormat: 'repeat' });\n    }\n    return config;\n  },\n  (error) =>\n    // 对请求错误做些什么\n    Promise.reject(error)\n);\n\n// 添加响应拦截器\naxiosInstance.interceptors.response.use(\n  (response) => {\n    // 对响应数据做点什么\n    return response;\n  },\n  (error) => {\n    if (error.response.status === 401) {\n      if (handleAxiosResponse401) handleAxiosResponse401();\n      return undefined;\n    }\n    // 对响应错误做点什么\n    return Promise.reject(error.response?.data || error);\n  }\n);\n\nexport default axiosInstance;\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\route\\routes.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\route\\utils.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\services\\api\\community.ts",["411","412"],[],"/*\n * @Author: shixuewen friendlysxw@163.com\n * @Date: 2022-07-08 19:10:08\n * @LastEditors: shixuewen friendlysxw@163.com\n * @LastEditTime: 2022-09-08 10:20:26\n * @Description: file description\n */\nimport { AxiosPromise } from 'axios';\nimport request from '../../request/axios';\nimport { ApiResp } from '../../types';\nimport {\n  CommunityBasicInfoResponse,\n  CommunityCheckinResponse,\n  CommunityContributionRankResponse,\n  FollowedCommunitiesResponse,\n  UserContributionResponse,\n  VerifyCommunityCheckinResponse,\n} from '../../types/api';\n/** 获取社区基本信息 */\nexport function fetchDetailByCommunityBasicInfo(\n  slug: string\n): AxiosPromise<ApiResp<CommunityBasicInfoResponse>> {\n  return request({\n    url: `/projects/${slug}/community`,\n    method: 'get',\n  });\n}\n\n/** 获取 社区贡献值排行 列表 */\nexport function fetchListForCommunityContributionRank(\n  slug: string\n): AxiosPromise<ApiResp<CommunityContributionRankResponse>> {\n  return request({\n    url: `/projects/${slug}/contribution-rank`,\n    method: 'get',\n  });\n}\n\n/** 获取用户在此社区的贡献信息 */\nexport function fetchOneByUserCommunityContributionRank(\n  id: number\n): AxiosPromise<ApiResp<UserContributionResponse>> {\n  return request({\n    url: `/communities/${id}/contribution`,\n    method: 'get',\n    headers: {\n      needToken: true,\n    },\n  });\n}\n\n/** 获取用户在此社区的积分 */\nexport function fetchOneByUserCommunityScore(\n  slug: string\n): AxiosPromise<ApiResp<number>> {\n  return request({\n    url: `/projects/${slug}/contribution`,\n    method: 'get',\n    headers: {\n      needToken: true,\n    },\n  });\n}\n\n/** 加入社区 */\nexport type FollowCommunityParams = {\n  id: number;\n};\nexport function followCommunity(\n  params: FollowCommunityParams\n): AxiosPromise<ApiResp<any>> {\n  const { id } = params;\n  return request({\n    url: `/communities/${id}/followers`,\n    method: 'post',\n    headers: {\n      needToken: true,\n    },\n  });\n}\n\n/** 社区签到 */\nexport function checkinCommunity(\n  id: number\n): AxiosPromise<ApiResp<CommunityCheckinResponse>> {\n  return request({\n    url: `/engagements/${id}/checkin`,\n    method: 'post',\n    headers: {\n      needToken: true,\n    },\n  });\n}\n/** 验证今日是否签到 */\nexport function verifyCommunityCheckin(\n  id: number\n): AxiosPromise<ApiResp<VerifyCommunityCheckinResponse>> {\n  return request({\n    url: `/engagements/${id}/checkin`,\n    method: 'get',\n    headers: {\n      needToken: true,\n    },\n  });\n}\n\n/** 获取 我加入的社区 列表 */\nexport function fetchListForUserFollowedCommunity(): AxiosPromise<\n  ApiResp<FollowedCommunitiesResponse>\n> {\n  return request({\n    url: `/communities/followed`,\n    method: 'get',\n    headers: {\n      needToken: true,\n    },\n  });\n}\n\n/** 下载contributions token */\nexport function downloadContributions(\n  communityId: string | number\n): AxiosPromise<any> {\n  return request({\n    url: `/communities/download/${communityId}.csv`,\n    method: 'get',\n    responseType: 'blob',\n    headers: {\n      needToken: true,\n    },\n  });\n}\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\services\\api\\explore.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\services\\api\\login.ts",["413","414","415","416","417","418"],[],"/*\n * @Author: shixuewen friendlysxw@163.com\n * @Date: 2022-07-01 15:09:50\n * @LastEditors: shixuewen friendlysxw@163.com\n * @LastEditTime: 2022-11-16 11:19:29\n * @Description: 登录授权相关接口\n */\n\nimport { AxiosPromise } from 'axios';\nimport qs from 'qs';\nimport request from '../../request/axios';\nimport { ApiResp } from '../../types';\n\nexport function login(params: any) {\n  // console.log('loginParams', params)\n  const data = qs.stringify(params);\n  return request({\n    url: '/users/login',\n    method: 'post',\n    data,\n  });\n}\n\nexport function getProfile() {\n  return request({\n    url: '/users/profile',\n    method: 'get',\n    headers: {\n      needToken: true,\n    },\n  });\n}\n\nexport function updateProfile(params: any) {\n  const data = qs.stringify(params);\n  return request({\n    url: '/users/profile',\n    method: 'post',\n    data,\n    headers: {\n      needToken: true,\n    },\n  });\n}\n\nexport function uploadAvatar(file: File) {\n  const form = new FormData();\n  form.append('file', file);\n  return request({\n    url: '/medium/upload',\n    method: 'post',\n    data: form,\n    headers: {\n      needToken: true,\n    },\n  });\n}\n\nexport function uploadImage(file: File) {\n  const form = new FormData();\n  form.append('file', file);\n  return request({\n    url: '/medium/upload',\n    method: 'post',\n    data: form,\n    headers: {\n      needToken: true,\n    },\n  });\n}\n\n// 绑定社交账号\nexport function link(params: any) {\n  const data = qs.stringify(params);\n  return request({\n    url: '/users/link',\n    method: 'post',\n    data,\n    headers: {\n      token: params.token,\n      needToken: true,\n    },\n  });\n}\n\n// 解绑社交账号\nexport function unlink(params: any) {\n  const data = qs.stringify(params);\n  return request({\n    url: '/users/unlink',\n    method: 'post',\n    data,\n    headers: {\n      token: params.token,\n      needToken: true,\n    },\n  });\n}\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\services\\api\\reward.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\services\\api\\task.ts",["419"],[],"/*\n * @Author: shixuewen friendlysxw@163.com\n * @Date: 2022-07-12 15:36:56\n * @LastEditors: shixuewen friendlysxw@163.com\n * @LastEditTime: 2022-11-28 17:43:05\n * @Description: file description\n */\nimport { AxiosPromise } from 'axios';\nimport { loadRefInfo, RefType } from '../../container/Ref';\nimport request from '../../request/axios';\nimport { ApiResp } from '../../types';\nimport {\n  TaskDetailResponse,\n  TodoTaskActionItem,\n  TodoTaskItem,\n  TodoTaskResponse,\n} from '../../types/api';\nimport { useGAEvent } from '../../hooks/useGoogleAnalytics';\nimport { TASK_PARTICIPANTS_FETCH_NUM } from '../../constants';\n\nconst TASK_CATALOG_GA = 'TASK';\nenum TaskActionGA {\n  TAKE_TASK = 'TAKE_TASK',\n  VERIFY_ACTIONS = 'VERIFY_ACTIONS',\n  VERIFY_ONE_ACTION = 'VERIFY_ONE_ACTION',\n}\n\n/** 接任务 */\nexport type TakeTaskParams = {\n  id: number;\n};\nexport function takeTask(params: TakeTaskParams): AxiosPromise<ApiResp<any>> {\n  const { id } = params;\n  const refInfo = loadRefInfo(RefType.TAKE_TASK, String(id));\n  const gaEvent = useGAEvent(TASK_CATALOG_GA);\n  gaEvent(TaskActionGA.TAKE_TASK, id);\n  if (refInfo && refInfo.referrerId > 0) {\n    return request({\n      url: `/tasks/${id}/takers`,\n      method: 'post',\n      data: {\n        referrerId: refInfo.referrerId,\n      },\n      headers: {\n        needToken: true,\n      },\n    });\n  }\n  return request({\n    url: `/tasks/${id}/takers`,\n    method: 'post',\n    headers: {\n      needToken: true,\n    },\n  });\n}\n\n/** 获取用户的任务列表 */\nexport function fetchListForUserTodoTask(): AxiosPromise<\n  ApiResp<TodoTaskResponse>\n> {\n  return request({\n    url: `/tasks/todo`,\n    method: 'get',\n    headers: {\n      needToken: true,\n    },\n  });\n}\n\n/** 对单个任务进行验证 */\nexport type VerifyOneTaskParams = {\n  id: number;\n};\nexport function verifyOneTask(\n  params: VerifyOneTaskParams\n): AxiosPromise<ApiResp<TodoTaskItem>> {\n  const { id } = params;\n  const gaEvent = useGAEvent(TASK_CATALOG_GA);\n  gaEvent(TaskActionGA.VERIFY_ACTIONS, id);\n  return request({\n    url: `/tasks/${id}/verification`,\n    method: 'post',\n    headers: {\n      needToken: true,\n    },\n  });\n}\n\n/** 对单个action进行验证 */\nexport type VerifyOneActionParams = {\n  id: number;\n  taskId: number;\n};\nexport function verifyOneAction(\n  params: VerifyOneActionParams\n): AxiosPromise<ApiResp<TodoTaskActionItem>> {\n  const { taskId, id } = params;\n  const gaEvent = useGAEvent(TASK_CATALOG_GA);\n  gaEvent(TaskActionGA.VERIFY_ONE_ACTION, id);\n  return request({\n    url: `/tasks/${taskId}/actions/${id}/verification`,\n    method: 'post',\n    headers: {\n      needToken: true,\n    },\n  });\n}\n\n/** 直接完成单个action */\nexport type CompletionOneActionParams = {\n  id: number;\n  taskId: number;\n};\nexport function completionOneAction(\n  params: CompletionOneActionParams\n): AxiosPromise<ApiResp<TodoTaskActionItem>> {\n  const { taskId, id } = params;\n  const gaEvent = useGAEvent(TASK_CATALOG_GA);\n  gaEvent(TaskActionGA.VERIFY_ONE_ACTION, id);\n  return request({\n    url: `/tasks/${taskId}/actions/${id}/completion`,\n    method: 'post',\n    headers: {\n      needToken: true,\n    },\n  });\n}\n\n/** 问卷调查提交 */\nexport type ConfirmQuestionActionParams = {\n  id: number;\n  taskId: number;\n  answer: string;\n};\nexport enum ResponseBizErrCode {\n  ACTION_ANSWER_CORRECT = 1001,\n  ACTION_ANSWER_WRONG = 1002,\n}\nexport type ConfirmQuestionActionApiResp = {\n  code: ResponseBizErrCode;\n};\nexport function confirmQuestionAction(\n  params: ConfirmQuestionActionParams\n): AxiosPromise<ConfirmQuestionActionApiResp> {\n  const { taskId, id, answer } = params;\n  const gaEvent = useGAEvent(TASK_CATALOG_GA);\n  gaEvent(TaskActionGA.VERIFY_ONE_ACTION, id);\n  return request({\n    url: `/tasks/${taskId}/actions/${id}/doing`,\n    method: 'post',\n    headers: {\n      needToken: true,\n    },\n    data: {\n      answer,\n    },\n  });\n}\n\n/** 获取单个任务详情 */\nexport function fetchDetail(\n  id: number\n): AxiosPromise<ApiResp<TaskDetailResponse>> {\n  return request({\n    url: `/tasks/${id}?participants=${TASK_PARTICIPANTS_FETCH_NUM}`,\n    method: 'get',\n    headers: {\n      needToken: true,\n    },\n  });\n}\n\nexport function checkTwitterNameValid(name: string) {\n  return request({\n    url: `/users/twitter?name=${name}`,\n    method: 'get',\n    headers: {\n      needToken: true,\n    },\n  });\n}\n\nexport function projectBindBot({\n  projectId,\n  discordId,\n}: {\n  projectId: string;\n  discordId: string;\n}) {\n  return request({\n    url: `/projects/${projectId}/binding`,\n    method: 'post',\n    data: {\n      discordId,\n    },\n    headers: {\n      needToken: true,\n    },\n  });\n}\n\nexport function checkTweetIdValid(tweetId: string) {\n  return request({\n    url: `/users/twitter?tweetId=${tweetId}`,\n    method: 'get',\n    headers: {\n      needToken: true,\n    },\n  });\n}\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\services\\api\\utils.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\setupTests.ts",["420"],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\store\\hooks.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\store\\store.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\types\\api.ts",["421"],[],"/*\n * @Author: shixuewen friendlysxw@163.com\n * @Date: 2022-07-05 18:55:17\n * @LastEditors: shixuewen friendlysxw@163.com\n * @LastEditTime: 2022-10-09 13:22:34\n * @Description: api 接口类型定义（多是组装entities type 为 response type）\n */\n\nimport {\n  Action,\n  Announcement,\n  Community,\n  ContributionRank,\n  MintStage,\n  Project,\n  ProjectStatus,\n  Reward,\n  Roadmap,\n  Task,\n  TaskAcceptedStatus,\n  TaskTodoCompleteStatus,\n  Team,\n  User,\n  Whitelist,\n} from './entities';\n\n/** explore api */\n\n// explore task\nexport enum SearchTaskStatus {\n  ALL = 'ALL',\n  LIVE = 'LIVE',\n  FUTURE = 'FUTURE',\n  CLOSED = 'CLOSED',\n}\nexport type ExploreSearchTasksRequestParams = {\n  status?: SearchTaskStatus;\n  keywords?: string;\n};\nexport type ExploreSearchTaskItem = Task & {\n  winnerNum?: number;\n  acceptedStatus?: TaskAcceptedStatus;\n  actions?: Action[];\n  project?: Project;\n  reward?: Reward;\n};\nexport type ExploreRecommendTaskItem = Task & {\n  winnerNum?: number;\n  acceptedStatus?: TaskAcceptedStatus;\n  actions?: Action[];\n  project?: Project;\n  reward?: Reward;\n};\n\n// explore project\nexport type ExploreProjectTaskItem = Task & {\n  winnerNum?: number;\n  acceptedStatus?: TaskAcceptedStatus;\n  actions?: Action[];\n};\nexport type ExploreSearchProjectsRequestParams = {\n  mintStage?: MintStage | '';\n  keywords?: string;\n};\nexport type ExploreSearchProjectItem = Project & {\n  community?: Community & {\n    memberNum?: number;\n  };\n  tasks?: ExploreProjectTaskItem[];\n};\n\nexport type ExploreRecommendProjectItem = Project & {\n  community?: Community;\n  tasks?: ExploreProjectTaskItem[];\n};\n\n// project detail\nexport type ProjectDetailTaskItem = Task & {\n  winnerNum?: number;\n  acceptedStatus?: TaskAcceptedStatus;\n  actions?: Action[];\n  reward?: Reward;\n};\nexport type ProjectDetailResponse = Project & {\n  tasks?: ProjectDetailTaskItem[];\n  teamMembers?: Team[];\n  roadmap?: Roadmap[];\n  whitelists?: Whitelist[];\n  community?: Community;\n  announcement?: Announcement;\n};\n\n/** community api */\n\nexport type CommunityBasicInfoResponse = Community & {\n  chainId?: number;\n};\n\nexport type CommunityContributionRankItem = ContributionRank;\nexport type CommunityContributionRankResponse = CommunityContributionRankItem[];\n\nexport type FollowedCommunityItem = Community & {\n  memberNums?: number;\n  contribution?: number;\n  project?: Project;\n};\nexport type FollowedCommunitiesResponse = FollowedCommunityItem[];\n\nexport type CommunityCheckinResponse = {\n  seqDays: number;\n  contribution: number;\n};\nexport type VerifyCommunityCheckinResponse = 0 | 1;\n\n/** contribution */\nexport type ContributionRanksResponse = ContributionRank[];\nexport type UserContributionResponse = ContributionRank;\n\n/** todo task api */\nexport enum UserActionStatus {\n  TODO = 'TODO',\n  DONE = 'DONE',\n}\n\nexport type TodoTaskActionItem = Action & {\n  status: UserActionStatus;\n  progress: string;\n};\n\nexport type TodoTaskItem = Task & {\n  status?: TaskTodoCompleteStatus;\n  actions?: TodoTaskActionItem[];\n  project?: Project;\n  whitelist?: Whitelist;\n  reward?: Reward;\n};\n\nexport type TodoTaskResponse = TodoTaskItem[];\n\n/** task detail api */\nexport type TaskParticipants = {\n  userDetails?: User[];\n  takers?: number;\n  finishers?: number;\n};\nexport type TaskDetailResponse = Task & {\n  winnerNum?: number;\n  acceptedStatus?: TaskAcceptedStatus;\n  actions?: TodoTaskActionItem[];\n  mintUrl?: string;\n  mintStartTime?: number;\n  status?: TaskTodoCompleteStatus;\n  project?: Project;\n  winnerList?: User[];\n  reward?: Reward;\n  participants?: TaskParticipants;\n};\n\n/** whitelist api */\nexport type UserRewardItem = Reward & {\n  task?: Task;\n  community?: Community;\n  whitelist?: Whitelist;\n  project?: Project;\n};\n/** user api */\nexport type FetchTwitterOauthTokenResponse = {\n  oauthToken: string;\n  oauthTokenSecret: string;\n};\nexport type UserRewardsResponse = UserRewardItem[];\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\types\\entities.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\types\\index.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\analytics.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\chain.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\lottie.ts",["422"],[],"/*\n * @Author: shixuewen friendlysxw@163.com\n * @Date: 2022-08-31 17:24:53\n * @LastEditors: shixuewen friendlysxw@163.com\n * @LastEditTime: 2022-08-31 17:52:24\n * @Description: file description\n */\nimport * as claimAnimationData from '../lottie-files/claim/claim.json';\nimport claim_asset_path_img_0 from '../lottie-files/claim/images/img_0.png';\nimport claim_asset_path_img_1 from '../lottie-files/claim/images/img_1.png';\nimport claim_asset_path_img_2 from '../lottie-files/claim/images/img_2.png';\nimport claim_asset_path_img_3 from '../lottie-files/claim/images/img_3.png';\n\nexport type LottieAnimationDataAssetType = {\n  id: string;\n  w?: number;\n  h?: number;\n  u?: string;\n  p?: string;\n  e?: number;\n};\nexport type LottieAnimationDataType = {\n  assets?: LottieAnimationDataAssetType[];\n  [key: string]: any;\n};\nexport const lottieAnimationDataAssetsAssign = (\n  _animationData: LottieAnimationDataType,\n  _assets: LottieAnimationDataAssetType[]\n): LottieAnimationDataType => {\n  const { assets } = _animationData;\n  if (assets) {\n    for (const asset of assets) {\n      const findAsset = _assets.find((v) => v.id === asset.id);\n      if (findAsset) {\n        Object.assign(asset, findAsset);\n      }\n    }\n  }\n  return { ..._animationData, assets };\n};\nexport const getClaimAnimationData = () => {\n  const replaceAssets = [\n    {\n      id: 'image_0',\n      u: '',\n      p: claim_asset_path_img_0,\n    },\n    {\n      id: 'image_1',\n      u: '',\n      p: claim_asset_path_img_1,\n    },\n    {\n      id: 'image_2',\n      u: '',\n      p: claim_asset_path_img_2,\n    },\n    {\n      id: 'image_3',\n      u: '',\n      p: claim_asset_path_img_3,\n    },\n  ];\n  return lottieAnimationDataAssetsAssign(claimAnimationData, replaceAssets);\n};\n","D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\nft.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\number.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\solana.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\string.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\task.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\time.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\token.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\twitter.ts",[],[],"D:\\www\\team\\enchanft\\apps\\collector-page\\src\\utils\\wlUserReact.ts",[],[],{"ruleId":"423","severity":1,"message":"424","line":49,"column":21,"nodeType":"425","messageId":"426","endLine":49,"endColumn":24,"suggestions":"427"},{"ruleId":"428","severity":1,"message":"429","line":78,"column":9,"nodeType":"430","messageId":"431","endLine":78,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":84,"column":9,"nodeType":"430","messageId":"431","endLine":84,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":96,"column":9,"nodeType":"430","messageId":"431","endLine":96,"endColumn":20},{"ruleId":"423","severity":1,"message":"424","line":50,"column":21,"nodeType":"425","messageId":"426","endLine":50,"endColumn":24,"suggestions":"432"},{"ruleId":"428","severity":1,"message":"429","line":79,"column":9,"nodeType":"430","messageId":"431","endLine":79,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":85,"column":9,"nodeType":"430","messageId":"431","endLine":85,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":97,"column":9,"nodeType":"430","messageId":"431","endLine":97,"endColumn":20},{"ruleId":"423","severity":1,"message":"424","line":50,"column":21,"nodeType":"425","messageId":"426","endLine":50,"endColumn":24,"suggestions":"433"},{"ruleId":"428","severity":1,"message":"429","line":79,"column":9,"nodeType":"430","messageId":"431","endLine":79,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":85,"column":9,"nodeType":"430","messageId":"431","endLine":85,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":97,"column":9,"nodeType":"430","messageId":"431","endLine":97,"endColumn":20},{"ruleId":"423","severity":1,"message":"424","line":53,"column":21,"nodeType":"425","messageId":"426","endLine":53,"endColumn":24,"suggestions":"434"},{"ruleId":"428","severity":1,"message":"429","line":82,"column":9,"nodeType":"430","messageId":"431","endLine":82,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":88,"column":9,"nodeType":"430","messageId":"431","endLine":88,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":100,"column":9,"nodeType":"430","messageId":"431","endLine":100,"endColumn":20},{"ruleId":"423","severity":1,"message":"424","line":52,"column":21,"nodeType":"425","messageId":"426","endLine":52,"endColumn":24,"suggestions":"435"},{"ruleId":"428","severity":1,"message":"429","line":81,"column":9,"nodeType":"430","messageId":"431","endLine":81,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":87,"column":9,"nodeType":"430","messageId":"431","endLine":87,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":99,"column":9,"nodeType":"430","messageId":"431","endLine":99,"endColumn":20},{"ruleId":"436","severity":1,"message":"437","line":8,"column":41,"nodeType":"438","messageId":"439","endLine":8,"endColumn":54},{"ruleId":"423","severity":1,"message":"424","line":44,"column":19,"nodeType":"425","messageId":"426","endLine":44,"endColumn":22,"suggestions":"440"},{"ruleId":"428","severity":1,"message":"429","line":66,"column":9,"nodeType":"430","messageId":"431","endLine":66,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":72,"column":9,"nodeType":"430","messageId":"431","endLine":72,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":84,"column":9,"nodeType":"430","messageId":"431","endLine":84,"endColumn":20},{"ruleId":"423","severity":1,"message":"424","line":47,"column":19,"nodeType":"425","messageId":"426","endLine":47,"endColumn":22,"suggestions":"441"},{"ruleId":"428","severity":1,"message":"429","line":82,"column":9,"nodeType":"430","messageId":"431","endLine":82,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":88,"column":9,"nodeType":"430","messageId":"431","endLine":88,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":100,"column":9,"nodeType":"430","messageId":"431","endLine":100,"endColumn":20},{"ruleId":"436","severity":1,"message":"442","line":10,"column":3,"nodeType":"438","messageId":"439","endLine":10,"endColumn":19},{"ruleId":"436","severity":1,"message":"443","line":76,"column":43,"nodeType":"438","messageId":"439","endLine":76,"endColumn":51},{"ruleId":"428","severity":1,"message":"429","line":138,"column":9,"nodeType":"430","messageId":"431","endLine":138,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":144,"column":9,"nodeType":"430","messageId":"431","endLine":144,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":151,"column":9,"nodeType":"430","messageId":"431","endLine":151,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":158,"column":9,"nodeType":"430","messageId":"431","endLine":158,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":163,"column":9,"nodeType":"430","messageId":"431","endLine":163,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":169,"column":9,"nodeType":"430","messageId":"431","endLine":169,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":176,"column":9,"nodeType":"430","messageId":"431","endLine":176,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":181,"column":9,"nodeType":"430","messageId":"431","endLine":181,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":187,"column":9,"nodeType":"430","messageId":"431","endLine":187,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":194,"column":9,"nodeType":"430","messageId":"431","endLine":194,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":200,"column":9,"nodeType":"430","messageId":"431","endLine":200,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":207,"column":9,"nodeType":"430","messageId":"431","endLine":207,"endColumn":20},{"ruleId":"423","severity":1,"message":"424","line":44,"column":19,"nodeType":"425","messageId":"426","endLine":44,"endColumn":22,"suggestions":"444"},{"ruleId":"428","severity":1,"message":"429","line":78,"column":9,"nodeType":"430","messageId":"431","endLine":78,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":84,"column":9,"nodeType":"430","messageId":"431","endLine":84,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":97,"column":9,"nodeType":"430","messageId":"431","endLine":97,"endColumn":20},{"ruleId":"436","severity":1,"message":"437","line":8,"column":41,"nodeType":"438","messageId":"439","endLine":8,"endColumn":54},{"ruleId":"428","severity":1,"message":"429","line":52,"column":9,"nodeType":"430","messageId":"431","endLine":52,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":57,"column":9,"nodeType":"430","messageId":"431","endLine":57,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":64,"column":9,"nodeType":"430","messageId":"431","endLine":64,"endColumn":20},{"ruleId":"436","severity":1,"message":"445","line":76,"column":9,"nodeType":"438","messageId":"439","endLine":76,"endColumn":16},{"ruleId":"436","severity":1,"message":"446","line":243,"column":23,"nodeType":"438","messageId":"439","endLine":243,"endColumn":29},{"ruleId":"436","severity":1,"message":"446","line":294,"column":23,"nodeType":"438","messageId":"439","endLine":294,"endColumn":29},{"ruleId":"428","severity":1,"message":"429","line":380,"column":9,"nodeType":"430","messageId":"431","endLine":380,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":386,"column":9,"nodeType":"430","messageId":"431","endLine":386,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":393,"column":9,"nodeType":"430","messageId":"431","endLine":393,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":400,"column":9,"nodeType":"430","messageId":"431","endLine":400,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":406,"column":9,"nodeType":"430","messageId":"431","endLine":406,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":413,"column":9,"nodeType":"430","messageId":"431","endLine":413,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":420,"column":9,"nodeType":"430","messageId":"431","endLine":420,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":426,"column":9,"nodeType":"430","messageId":"431","endLine":426,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":433,"column":9,"nodeType":"430","messageId":"431","endLine":433,"endColumn":20},{"ruleId":"423","severity":1,"message":"424","line":44,"column":19,"nodeType":"425","messageId":"426","endLine":44,"endColumn":22,"suggestions":"447"},{"ruleId":"428","severity":1,"message":"429","line":80,"column":9,"nodeType":"430","messageId":"431","endLine":80,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":86,"column":9,"nodeType":"430","messageId":"431","endLine":86,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":99,"column":9,"nodeType":"430","messageId":"431","endLine":99,"endColumn":20},{"ruleId":"423","severity":1,"message":"424","line":43,"column":19,"nodeType":"425","messageId":"426","endLine":43,"endColumn":22,"suggestions":"448"},{"ruleId":"428","severity":1,"message":"429","line":77,"column":9,"nodeType":"430","messageId":"431","endLine":77,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":83,"column":9,"nodeType":"430","messageId":"431","endLine":83,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":96,"column":9,"nodeType":"430","messageId":"431","endLine":96,"endColumn":20},{"ruleId":"423","severity":1,"message":"424","line":20,"column":52,"nodeType":"425","messageId":"426","endLine":20,"endColumn":55,"suggestions":"449"},{"ruleId":"436","severity":1,"message":"450","line":6,"column":31,"nodeType":"438","messageId":"439","endLine":6,"endColumn":39},{"ruleId":"436","severity":1,"message":"451","line":8,"column":23,"nodeType":"438","messageId":"439","endLine":8,"endColumn":32},{"ruleId":"436","severity":1,"message":"452","line":8,"column":34,"nodeType":"438","messageId":"439","endLine":8,"endColumn":40},{"ruleId":"428","severity":1,"message":"429","line":73,"column":9,"nodeType":"430","messageId":"431","endLine":73,"endColumn":20},{"ruleId":"436","severity":1,"message":"453","line":1,"column":8,"nodeType":"438","messageId":"439","endLine":1,"endColumn":13},{"ruleId":"436","severity":1,"message":"453","line":8,"column":8,"nodeType":"438","messageId":"439","endLine":8,"endColumn":13},{"ruleId":"436","severity":1,"message":"453","line":8,"column":8,"nodeType":"438","messageId":"439","endLine":8,"endColumn":13},{"ruleId":"423","severity":1,"message":"424","line":19,"column":43,"nodeType":"425","messageId":"426","endLine":19,"endColumn":46,"suggestions":"454"},{"ruleId":"436","severity":1,"message":"455","line":8,"column":34,"nodeType":"438","messageId":"439","endLine":8,"endColumn":42},{"ruleId":"436","severity":1,"message":"456","line":32,"column":13,"nodeType":"438","messageId":"439","endLine":32,"endColumn":24},{"ruleId":"436","severity":1,"message":"457","line":34,"column":14,"nodeType":"438","messageId":"439","endLine":34,"endColumn":26},{"ruleId":"436","severity":1,"message":"458","line":24,"column":5,"nodeType":"438","messageId":"439","endLine":24,"endColumn":10},{"ruleId":"423","severity":1,"message":"424","line":25,"column":44,"nodeType":"425","messageId":"426","endLine":25,"endColumn":47,"suggestions":"459"},{"ruleId":"423","severity":1,"message":"424","line":31,"column":54,"nodeType":"425","messageId":"426","endLine":31,"endColumn":57,"suggestions":"460"},{"ruleId":"423","severity":1,"message":"424","line":71,"column":25,"nodeType":"425","messageId":"426","endLine":71,"endColumn":28,"suggestions":"461"},{"ruleId":"423","severity":1,"message":"424","line":123,"column":17,"nodeType":"425","messageId":"426","endLine":123,"endColumn":20,"suggestions":"462"},{"ruleId":"436","severity":1,"message":"463","line":9,"column":10,"nodeType":"438","messageId":"439","endLine":9,"endColumn":22},{"ruleId":"436","severity":1,"message":"464","line":12,"column":10,"nodeType":"438","messageId":"439","endLine":12,"endColumn":17},{"ruleId":"423","severity":1,"message":"424","line":14,"column":31,"nodeType":"425","messageId":"426","endLine":14,"endColumn":34,"suggestions":"465"},{"ruleId":"423","severity":1,"message":"424","line":34,"column":39,"nodeType":"425","messageId":"426","endLine":34,"endColumn":42,"suggestions":"466"},{"ruleId":"423","severity":1,"message":"424","line":73,"column":30,"nodeType":"425","messageId":"426","endLine":73,"endColumn":33,"suggestions":"467"},{"ruleId":"423","severity":1,"message":"424","line":87,"column":32,"nodeType":"425","messageId":"426","endLine":87,"endColumn":35,"suggestions":"468"},{"ruleId":"423","severity":1,"message":"424","line":32,"column":72,"nodeType":"425","messageId":"426","endLine":32,"endColumn":75,"suggestions":"469"},{"ruleId":"470","severity":2,"message":"471","line":5,"column":1,"nodeType":"472","endLine":5,"endColumn":36},{"ruleId":"436","severity":1,"message":"473","line":16,"column":3,"nodeType":"438","messageId":"439","endLine":16,"endColumn":16},{"ruleId":"423","severity":1,"message":"424","line":24,"column":18,"nodeType":"425","messageId":"426","endLine":24,"endColumn":21,"suggestions":"474"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["475","476"],"no-console","Unexpected console statement.","MemberExpression","unexpected",["477","478"],["479","480"],["481","482"],["483","484"],"@typescript-eslint/no-unused-vars","'PayloadAction' is defined but never used.","Identifier","unusedVar",["485","486"],["487","488"],"'createAsyncThunk' is defined but never used.","'getState' is defined but never used.",["489","490"],"'actions' is assigned a value but never used.","'answer' is assigned a value but never used.",["491","492"],["493","494"],["495","496"],"'category' is assigned a value but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'React' is defined but never used.",["497","498"],"'useState' is defined but never used.","'followState' is assigned a value but never used.","'checkinState' is assigned a value but never used.","'store' is assigned a value but never used.",["499","500"],["501","502"],["503","504"],["505","506"],"'AxiosPromise' is defined but never used.","'ApiResp' is defined but never used.",["507","508"],["509","510"],["511","512"],["513","514"],["515","516"],"import/no-extraneous-dependencies","'@testing-library/jest-dom' should be listed in the project's dependencies. Run 'npm i -S @testing-library/jest-dom' to add it","ImportDeclaration","'ProjectStatus' is defined but never used.",["517","518"],{"messageId":"519","fix":"520","desc":"521"},{"messageId":"522","fix":"523","desc":"524"},{"messageId":"519","fix":"525","desc":"521"},{"messageId":"522","fix":"526","desc":"524"},{"messageId":"519","fix":"527","desc":"521"},{"messageId":"522","fix":"528","desc":"524"},{"messageId":"519","fix":"529","desc":"521"},{"messageId":"522","fix":"530","desc":"524"},{"messageId":"519","fix":"531","desc":"521"},{"messageId":"522","fix":"532","desc":"524"},{"messageId":"519","fix":"533","desc":"521"},{"messageId":"522","fix":"534","desc":"524"},{"messageId":"519","fix":"535","desc":"521"},{"messageId":"522","fix":"536","desc":"524"},{"messageId":"519","fix":"537","desc":"521"},{"messageId":"522","fix":"538","desc":"524"},{"messageId":"519","fix":"539","desc":"521"},{"messageId":"522","fix":"540","desc":"524"},{"messageId":"519","fix":"541","desc":"521"},{"messageId":"522","fix":"542","desc":"524"},{"messageId":"519","fix":"543","desc":"521"},{"messageId":"522","fix":"544","desc":"524"},{"messageId":"519","fix":"545","desc":"521"},{"messageId":"522","fix":"546","desc":"524"},{"messageId":"519","fix":"547","desc":"521"},{"messageId":"522","fix":"548","desc":"524"},{"messageId":"519","fix":"549","desc":"521"},{"messageId":"522","fix":"550","desc":"524"},{"messageId":"519","fix":"551","desc":"521"},{"messageId":"522","fix":"552","desc":"524"},{"messageId":"519","fix":"553","desc":"521"},{"messageId":"522","fix":"554","desc":"524"},{"messageId":"519","fix":"555","desc":"521"},{"messageId":"522","fix":"556","desc":"524"},{"messageId":"519","fix":"557","desc":"521"},{"messageId":"522","fix":"558","desc":"524"},{"messageId":"519","fix":"559","desc":"521"},{"messageId":"522","fix":"560","desc":"524"},{"messageId":"519","fix":"561","desc":"521"},{"messageId":"522","fix":"562","desc":"524"},{"messageId":"519","fix":"563","desc":"521"},{"messageId":"522","fix":"564","desc":"524"},{"messageId":"519","fix":"565","desc":"521"},{"messageId":"522","fix":"566","desc":"524"},"suggestUnknown",{"range":"567","text":"568"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"567","text":"569"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"570","text":"568"},{"range":"570","text":"569"},{"range":"571","text":"568"},{"range":"571","text":"569"},{"range":"572","text":"568"},{"range":"572","text":"569"},{"range":"573","text":"568"},{"range":"573","text":"569"},{"range":"574","text":"568"},{"range":"574","text":"569"},{"range":"575","text":"568"},{"range":"575","text":"569"},{"range":"576","text":"568"},{"range":"576","text":"569"},{"range":"577","text":"568"},{"range":"577","text":"569"},{"range":"578","text":"568"},{"range":"578","text":"569"},{"range":"579","text":"568"},{"range":"579","text":"569"},{"range":"580","text":"568"},{"range":"580","text":"569"},{"range":"581","text":"568"},{"range":"581","text":"569"},{"range":"582","text":"568"},{"range":"582","text":"569"},{"range":"583","text":"568"},{"range":"583","text":"569"},{"range":"584","text":"568"},{"range":"584","text":"569"},{"range":"585","text":"568"},{"range":"585","text":"569"},{"range":"586","text":"568"},{"range":"586","text":"569"},{"range":"587","text":"568"},{"range":"587","text":"569"},{"range":"588","text":"568"},{"range":"588","text":"569"},{"range":"589","text":"568"},{"range":"589","text":"569"},{"range":"590","text":"568"},{"range":"590","text":"569"},[1504,1507],"unknown","never",[1477,1480],[1432,1435],[1507,1510],[1446,1449],[1313,1316],[1414,1417],[1436,1439],[1355,1358],[1257,1260],[718,721],[520,523],[697,700],[909,912],[1697,1700],[2737,2740],[363,366],[718,721],[1408,1411],[1647,1650],[910,913],[811,814]]